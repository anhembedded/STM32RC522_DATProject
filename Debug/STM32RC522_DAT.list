
STM32RC522_DAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080040d8  080040d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f8  080041f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080041f8  080041f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041f8  080041f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f8  080041f8  000141f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  08004270  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08004270  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008807  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5b  00000000  00000000  000288a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002a700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f9d  00000000  00000000  0002b8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b479  00000000  00000000  00043895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085883  00000000  00000000  0004ed0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4591  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002878  00000000  00000000  000d45e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080040c0 	.word	0x080040c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080040c0 	.word	0x080040c0

0800014c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000160:	4b18      	ldr	r3, [pc, #96]	; (80001c4 <MX_GPIO_Init+0x78>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a17      	ldr	r2, [pc, #92]	; (80001c4 <MX_GPIO_Init+0x78>)
 8000166:	f043 0308 	orr.w	r3, r3, #8
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b15      	ldr	r3, [pc, #84]	; (80001c4 <MX_GPIO_Init+0x78>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0308 	and.w	r3, r3, #8
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b12      	ldr	r3, [pc, #72]	; (80001c4 <MX_GPIO_Init+0x78>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a11      	ldr	r2, [pc, #68]	; (80001c4 <MX_GPIO_Init+0x78>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <MX_GPIO_Init+0x78>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RC522_CS_Pin|RC522_Rst_Pin, GPIO_PIN_RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000196:	480c      	ldr	r0, [pc, #48]	; (80001c8 <MX_GPIO_Init+0x7c>)
 8000198:	f001 f9ce 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RC522_CS_Pin|RC522_Rst_Pin;
 800019c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80001a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001a2:	2301      	movs	r3, #1
 80001a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001a6:	2300      	movs	r3, #0
 80001a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001aa:	2302      	movs	r3, #2
 80001ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001ae:	f107 0308 	add.w	r3, r7, #8
 80001b2:	4619      	mov	r1, r3
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <MX_GPIO_Init+0x7c>)
 80001b6:	f001 f83b 	bl	8001230 <HAL_GPIO_Init>

}
 80001ba:	bf00      	nop
 80001bc:	3718      	adds	r7, #24
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40021000 	.word	0x40021000
 80001c8:	40010c00 	.word	0x40010c00

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b0a0      	sub	sp, #128	; 0x80
 80001d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fde9 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 fbe1 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f7ff ffb7 	bl	800014c <MX_GPIO_Init>
  MX_SPI2_Init();
 80001de:	f000 fc1d 	bl	8000a1c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80001e2:	f000 fd3d 	bl	8000c60 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < 16; i++)
 80001e6:	2300      	movs	r3, #0
 80001e8:	677b      	str	r3, [r7, #116]	; 0x74
 80001ea:	e007      	b.n	80001fc <main+0x30>
  {
    tmp_str[i] = 'A';
 80001ec:	4a4a      	ldr	r2, [pc, #296]	; (8000318 <main+0x14c>)
 80001ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80001f0:	4413      	add	r3, r2
 80001f2:	2241      	movs	r2, #65	; 0x41
 80001f4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 16; i++)
 80001f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80001f8:	3301      	adds	r3, #1
 80001fa:	677b      	str	r3, [r7, #116]	; 0x74
 80001fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80001fe:	2b0f      	cmp	r3, #15
 8000200:	ddf4      	ble.n	80001ec <main+0x20>
  }
  for (int i = 16; i < 32; i++)
 8000202:	2310      	movs	r3, #16
 8000204:	673b      	str	r3, [r7, #112]	; 0x70
 8000206:	e007      	b.n	8000218 <main+0x4c>
  {
    tmp_str[i] = 'B';
 8000208:	4a43      	ldr	r2, [pc, #268]	; (8000318 <main+0x14c>)
 800020a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800020c:	4413      	add	r3, r2
 800020e:	2242      	movs	r2, #66	; 0x42
 8000210:	701a      	strb	r2, [r3, #0]
  for (int i = 16; i < 32; i++)
 8000212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000214:	3301      	adds	r3, #1
 8000216:	673b      	str	r3, [r7, #112]	; 0x70
 8000218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800021a:	2b1f      	cmp	r3, #31
 800021c:	ddf4      	ble.n	8000208 <main+0x3c>
  }
  for (int i = 32; i < 48; i++)
 800021e:	2320      	movs	r3, #32
 8000220:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000222:	e007      	b.n	8000234 <main+0x68>
  {
    tmp_str[i] = 'C';
 8000224:	4a3c      	ldr	r2, [pc, #240]	; (8000318 <main+0x14c>)
 8000226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000228:	4413      	add	r3, r2
 800022a:	2243      	movs	r2, #67	; 0x43
 800022c:	701a      	strb	r2, [r3, #0]
  for (int i = 32; i < 48; i++)
 800022e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000230:	3301      	adds	r3, #1
 8000232:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000236:	2b2f      	cmp	r3, #47	; 0x2f
 8000238:	ddf4      	ble.n	8000224 <main+0x58>
  }
  for (int i = 48; i < 64; i++)
 800023a:	2330      	movs	r3, #48	; 0x30
 800023c:	66bb      	str	r3, [r7, #104]	; 0x68
 800023e:	e007      	b.n	8000250 <main+0x84>
  {
    tmp_str[i] = 'D';
 8000240:	4a35      	ldr	r2, [pc, #212]	; (8000318 <main+0x14c>)
 8000242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000244:	4413      	add	r3, r2
 8000246:	2244      	movs	r2, #68	; 0x44
 8000248:	701a      	strb	r2, [r3, #0]
  for (int i = 48; i < 64; i++)
 800024a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800024c:	3301      	adds	r3, #1
 800024e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000250:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000252:	2b3f      	cmp	r3, #63	; 0x3f
 8000254:	ddf4      	ble.n	8000240 <main+0x74>
  }
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8000256:	2201      	movs	r2, #1
 8000258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800025c:	482f      	ldr	r0, [pc, #188]	; (800031c <main+0x150>)
 800025e:	f001 f96b 	bl	8001538 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000262:	2064      	movs	r0, #100	; 0x64
 8000264:	f000 fe02 	bl	8000e6c <HAL_Delay>
  MFRC522_Init();
 8000268:	f002 ffb3 	bl	80031d2 <MFRC522_Init>
  HAL_Delay(1000);
 800026c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000270:	f000 fdfc 	bl	8000e6c <HAL_Delay>
  u_char status, cardstr[MAX_LEN + 1];
  u_char card_data[17];
  uint32_t delay_val = 1000; // ms
 8000274:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000278:	667b      	str	r3, [r7, #100]	; 0x64
  uint16_t result = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  u_char UID[5];
  // a private key to scramble data writing/reading to/from RFID card:
  u_char Mx1[7][5] = {{0x12, 0x45, 0xF2, 0xA8}, {0xB2, 0x6C, 0x39, 0x83}, {0x55, 0xE5, 0xDA, 0x18}, {0x1F, 0x09, 0xCA, 0x75}, {0x99, 0xA2, 0x50, 0xEC}, {0x2C, 0x88, 0x7F, 0x3D}};
 8000280:	f107 0308 	add.w	r3, r7, #8
 8000284:	2223      	movs	r2, #35	; 0x23
 8000286:	2100      	movs	r1, #0
 8000288:	4618      	mov	r0, r3
 800028a:	f003 fa97 	bl	80037bc <memset>
 800028e:	4a24      	ldr	r2, [pc, #144]	; (8000320 <main+0x154>)
 8000290:	f107 0308 	add.w	r3, r7, #8
 8000294:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000298:	6018      	str	r0, [r3, #0]
 800029a:	3304      	adds	r3, #4
 800029c:	7019      	strb	r1, [r3, #0]
 800029e:	4a21      	ldr	r2, [pc, #132]	; (8000324 <main+0x158>)
 80002a0:	f107 030d 	add.w	r3, r7, #13
 80002a4:	6810      	ldr	r0, [r2, #0]
 80002a6:	6018      	str	r0, [r3, #0]
 80002a8:	7912      	ldrb	r2, [r2, #4]
 80002aa:	711a      	strb	r2, [r3, #4]
 80002ac:	4a1e      	ldr	r2, [pc, #120]	; (8000328 <main+0x15c>)
 80002ae:	f107 0312 	add.w	r3, r7, #18
 80002b2:	6810      	ldr	r0, [r2, #0]
 80002b4:	6018      	str	r0, [r3, #0]
 80002b6:	7912      	ldrb	r2, [r2, #4]
 80002b8:	711a      	strb	r2, [r3, #4]
 80002ba:	4a1c      	ldr	r2, [pc, #112]	; (800032c <main+0x160>)
 80002bc:	f107 0317 	add.w	r3, r7, #23
 80002c0:	6810      	ldr	r0, [r2, #0]
 80002c2:	6018      	str	r0, [r3, #0]
 80002c4:	7912      	ldrb	r2, [r2, #4]
 80002c6:	711a      	strb	r2, [r3, #4]
 80002c8:	4a19      	ldr	r2, [pc, #100]	; (8000330 <main+0x164>)
 80002ca:	f107 031c 	add.w	r3, r7, #28
 80002ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002d2:	6018      	str	r0, [r3, #0]
 80002d4:	3304      	adds	r3, #4
 80002d6:	7019      	strb	r1, [r3, #0]
 80002d8:	4a16      	ldr	r2, [pc, #88]	; (8000334 <main+0x168>)
 80002da:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80002de:	6810      	ldr	r0, [r2, #0]
 80002e0:	6018      	str	r0, [r3, #0]
 80002e2:	7912      	ldrb	r2, [r2, #4]
 80002e4:	711a      	strb	r2, [r3, #4]
  u_char SectorKey[7];
  status = Read_MFRC522(VersionReg);
 80002e6:	2037      	movs	r0, #55	; 0x37
 80002e8:	f002 fef2 	bl	80030d0 <Read_MFRC522>
 80002ec:	4603      	mov	r3, r0
 80002ee:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
  sprintf(str1,"Running RC522");
 80002f2:	4911      	ldr	r1, [pc, #68]	; (8000338 <main+0x16c>)
 80002f4:	4811      	ldr	r0, [pc, #68]	; (800033c <main+0x170>)
 80002f6:	f003 fa69 	bl	80037cc <siprintf>
  sprintf(str2,"ver:%x", status);
 80002fa:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80002fe:	461a      	mov	r2, r3
 8000300:	490f      	ldr	r1, [pc, #60]	; (8000340 <main+0x174>)
 8000302:	4810      	ldr	r0, [pc, #64]	; (8000344 <main+0x178>)
 8000304:	f003 fa62 	bl	80037cc <siprintf>
  HAL_Delay(1000);
 8000308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030c:	f000 fdae 	bl	8000e6c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    for (int i = 0; i < 16; i++)
 8000310:	2300      	movs	r3, #0
 8000312:	663b      	str	r3, [r7, #96]	; 0x60
 8000314:	e021      	b.n	800035a <main+0x18e>
 8000316:	bf00      	nop
 8000318:	200000dc 	.word	0x200000dc
 800031c:	40010c00 	.word	0x40010c00
 8000320:	0800416c 	.word	0x0800416c
 8000324:	08004174 	.word	0x08004174
 8000328:	0800417c 	.word	0x0800417c
 800032c:	08004184 	.word	0x08004184
 8000330:	0800418c 	.word	0x0800418c
 8000334:	08004194 	.word	0x08004194
 8000338:	080040d8 	.word	0x080040d8
 800033c:	2000008c 	.word	0x2000008c
 8000340:	080040e8 	.word	0x080040e8
 8000344:	200000a0 	.word	0x200000a0
    {
      cardstr[i] = 0;
 8000348:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800034c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800034e:	4413      	add	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 16; i++)
 8000354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000356:	3301      	adds	r3, #1
 8000358:	663b      	str	r3, [r7, #96]	; 0x60
 800035a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800035c:	2b0f      	cmp	r3, #15
 800035e:	ddf3      	ble.n	8000348 <main+0x17c>
    }
    status = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
    // Find cards
    status = MFRC522_Request(PICC_REQIDL, cardstr);
 8000366:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800036a:	4619      	mov	r1, r3
 800036c:	2026      	movs	r0, #38	; 0x26
 800036e:	f002 ff50 	bl	8003212 <MFRC522_Request>
 8000372:	4603      	mov	r3, r0
 8000374:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
    if (status == MI_OK)
 8000378:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800037c:	2b00      	cmp	r3, #0
 800037e:	f040 82ec 	bne.w	800095a <main+0x78e>
    {

      result = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      result++;
 8000388:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800038c:	3301      	adds	r3, #1
 800038e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      sprintf(str1, "Card:%x,%x,%x", cardstr[0], cardstr[1], cardstr[2]);
 8000392:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000396:	461a      	mov	r2, r3
 8000398:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800039c:	4619      	mov	r1, r3
 800039e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80003a2:	9300      	str	r3, [sp, #0]
 80003a4:	460b      	mov	r3, r1
 80003a6:	49b4      	ldr	r1, [pc, #720]	; (8000678 <main+0x4ac>)
 80003a8:	48b4      	ldr	r0, [pc, #720]	; (800067c <main+0x4b0>)
 80003aa:	f003 fa0f 	bl	80037cc <siprintf>
      //
      // Anti-collision, return card serial number == 4 bytes
      HAL_Delay(1);
 80003ae:	2001      	movs	r0, #1
 80003b0:	f000 fd5c 	bl	8000e6c <HAL_Delay>
      status = MFRC522_Anticoll(cardstr);
 80003b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003b8:	4618      	mov	r0, r3
 80003ba:	f003 f818 	bl	80033ee <MFRC522_Anticoll>
 80003be:	4603      	mov	r3, r0
 80003c0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
      if (status == MI_OK)
 80003c4:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	f040 82aa 	bne.w	8000922 <main+0x756>
      {
        result++;
 80003ce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80003d2:	3301      	adds	r3, #1
 80003d4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        sprintf(str2, "UID:%x %x %x %x", cardstr[0], cardstr[1], cardstr[2], cardstr[3]);
 80003d8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80003dc:	4619      	mov	r1, r3
 80003de:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80003e2:	4618      	mov	r0, r3
 80003e4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80003e8:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80003ec:	9201      	str	r2, [sp, #4]
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	4603      	mov	r3, r0
 80003f2:	460a      	mov	r2, r1
 80003f4:	49a2      	ldr	r1, [pc, #648]	; (8000680 <main+0x4b4>)
 80003f6:	48a3      	ldr	r0, [pc, #652]	; (8000684 <main+0x4b8>)
 80003f8:	f003 f9e8 	bl	80037cc <siprintf>
        UID[0] = cardstr[0];
 80003fc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000400:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        UID[1] = cardstr[1];
 8000404:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000408:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        UID[2] = cardstr[2];
 800040c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000410:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        UID[3] = cardstr[3];
 8000414:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        UID[4] = cardstr[4];
 800041c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000420:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        //
        HAL_Delay(1);
 8000424:	2001      	movs	r0, #1
 8000426:	f000 fd21 	bl	8000e6c <HAL_Delay>
        status = MFRC522_SelectTag(cardstr);
 800042a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800042e:	4618      	mov	r0, r3
 8000430:	f003 f931 	bl	8003696 <MFRC522_SelectTag>
 8000434:	4603      	mov	r3, r0
 8000436:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
        if (status > 0)
 800043a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800043e:	2b00      	cmp	r3, #0
 8000440:	f000 826f 	beq.w	8000922 <main+0x756>
        {
          result++;
 8000444:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000448:	3301      	adds	r3, #1
 800044a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
          //
          SectorKey[0] = ((Mx1[0][0]) ^ (UID[0])) + ((Mx1[0][1]) ^ (UID[1])) + ((Mx1[0][2]) ^ (UID[2])) + ((Mx1[0][3]) ^ (UID[3])); // 0x11; //KeyA[0]
 800044e:	7a3a      	ldrb	r2, [r7, #8]
 8000450:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000454:	4053      	eors	r3, r2
 8000456:	b2da      	uxtb	r2, r3
 8000458:	7a79      	ldrb	r1, [r7, #9]
 800045a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800045e:	404b      	eors	r3, r1
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4413      	add	r3, r2
 8000464:	b2da      	uxtb	r2, r3
 8000466:	7ab9      	ldrb	r1, [r7, #10]
 8000468:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800046c:	404b      	eors	r3, r1
 800046e:	b2db      	uxtb	r3, r3
 8000470:	4413      	add	r3, r2
 8000472:	b2da      	uxtb	r2, r3
 8000474:	7af9      	ldrb	r1, [r7, #11]
 8000476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800047a:	404b      	eors	r3, r1
 800047c:	b2db      	uxtb	r3, r3
 800047e:	4413      	add	r3, r2
 8000480:	b2db      	uxtb	r3, r3
 8000482:	703b      	strb	r3, [r7, #0]
          SectorKey[1] = ((Mx1[1][0]) ^ (UID[0])) + ((Mx1[1][1]) ^ (UID[1])) + ((Mx1[1][2]) ^ (UID[2])) + ((Mx1[1][3]) ^ (UID[3])); // 0x11; //KeyA[0]
 8000484:	7b7a      	ldrb	r2, [r7, #13]
 8000486:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800048a:	4053      	eors	r3, r2
 800048c:	b2da      	uxtb	r2, r3
 800048e:	7bb9      	ldrb	r1, [r7, #14]
 8000490:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000494:	404b      	eors	r3, r1
 8000496:	b2db      	uxtb	r3, r3
 8000498:	4413      	add	r3, r2
 800049a:	b2da      	uxtb	r2, r3
 800049c:	7bf9      	ldrb	r1, [r7, #15]
 800049e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004a2:	404b      	eors	r3, r1
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4413      	add	r3, r2
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	7c39      	ldrb	r1, [r7, #16]
 80004ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004b0:	404b      	eors	r3, r1
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	4413      	add	r3, r2
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	707b      	strb	r3, [r7, #1]
          SectorKey[2] = ((Mx1[2][0]) ^ (UID[0])) + ((Mx1[2][1]) ^ (UID[1])) + ((Mx1[2][2]) ^ (UID[2])) + ((Mx1[2][3]) ^ (UID[3])); // 0x11; //KeyA[0]
 80004ba:	7cba      	ldrb	r2, [r7, #18]
 80004bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80004c0:	4053      	eors	r3, r2
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	7cf9      	ldrb	r1, [r7, #19]
 80004c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80004ca:	404b      	eors	r3, r1
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	4413      	add	r3, r2
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	7d39      	ldrb	r1, [r7, #20]
 80004d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004d8:	404b      	eors	r3, r1
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	4413      	add	r3, r2
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	7d79      	ldrb	r1, [r7, #21]
 80004e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004e6:	404b      	eors	r3, r1
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	4413      	add	r3, r2
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	70bb      	strb	r3, [r7, #2]
          SectorKey[3] = ((Mx1[3][0]) ^ (UID[0])) + ((Mx1[3][1]) ^ (UID[1])) + ((Mx1[3][2]) ^ (UID[2])) + ((Mx1[3][3]) ^ (UID[3])); // 0x11; //KeyA[0]
 80004f0:	7dfa      	ldrb	r2, [r7, #23]
 80004f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80004f6:	4053      	eors	r3, r2
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	7e39      	ldrb	r1, [r7, #24]
 80004fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000500:	404b      	eors	r3, r1
 8000502:	b2db      	uxtb	r3, r3
 8000504:	4413      	add	r3, r2
 8000506:	b2da      	uxtb	r2, r3
 8000508:	7e79      	ldrb	r1, [r7, #25]
 800050a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800050e:	404b      	eors	r3, r1
 8000510:	b2db      	uxtb	r3, r3
 8000512:	4413      	add	r3, r2
 8000514:	b2da      	uxtb	r2, r3
 8000516:	7eb9      	ldrb	r1, [r7, #26]
 8000518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800051c:	404b      	eors	r3, r1
 800051e:	b2db      	uxtb	r3, r3
 8000520:	4413      	add	r3, r2
 8000522:	b2db      	uxtb	r3, r3
 8000524:	70fb      	strb	r3, [r7, #3]
          SectorKey[4] = ((Mx1[4][0]) ^ (UID[0])) + ((Mx1[4][1]) ^ (UID[1])) + ((Mx1[4][2]) ^ (UID[2])) + ((Mx1[4][3]) ^ (UID[3])); // 0x11; //KeyA[0]
 8000526:	7f3a      	ldrb	r2, [r7, #28]
 8000528:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800052c:	4053      	eors	r3, r2
 800052e:	b2da      	uxtb	r2, r3
 8000530:	7f79      	ldrb	r1, [r7, #29]
 8000532:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000536:	404b      	eors	r3, r1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	4413      	add	r3, r2
 800053c:	b2da      	uxtb	r2, r3
 800053e:	7fb9      	ldrb	r1, [r7, #30]
 8000540:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000544:	404b      	eors	r3, r1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	4413      	add	r3, r2
 800054a:	b2da      	uxtb	r2, r3
 800054c:	7ff9      	ldrb	r1, [r7, #31]
 800054e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000552:	404b      	eors	r3, r1
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4413      	add	r3, r2
 8000558:	b2db      	uxtb	r3, r3
 800055a:	713b      	strb	r3, [r7, #4]
          SectorKey[5] = ((Mx1[5][0]) ^ (UID[0])) + ((Mx1[5][1]) ^ (UID[1])) + ((Mx1[5][2]) ^ (UID[2])) + ((Mx1[5][3]) ^ (UID[3])); // 0x11; //KeyA[0]
 800055c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000560:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000564:	4053      	eors	r3, r2
 8000566:	b2da      	uxtb	r2, r3
 8000568:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800056c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000570:	404b      	eors	r3, r1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	4413      	add	r3, r2
 8000576:	b2da      	uxtb	r2, r3
 8000578:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800057c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000580:	404b      	eors	r3, r1
 8000582:	b2db      	uxtb	r3, r3
 8000584:	4413      	add	r3, r2
 8000586:	b2da      	uxtb	r2, r3
 8000588:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800058c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000590:	404b      	eors	r3, r1
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4413      	add	r3, r2
 8000596:	b2db      	uxtb	r3, r3
 8000598:	717b      	strb	r3, [r7, #5]
          HAL_Delay(1);
 800059a:	2001      	movs	r0, #1
 800059c:	f000 fc66 	bl	8000e6c <HAL_Delay>
          status = MFRC522_Auth(0x60, 3, SectorKey, cardstr);
 80005a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005a4:	463a      	mov	r2, r7
 80005a6:	2103      	movs	r1, #3
 80005a8:	2060      	movs	r0, #96	; 0x60
 80005aa:	f003 f811 	bl	80035d0 <MFRC522_Auth>
 80005ae:	4603      	mov	r3, r0
 80005b0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
          if (status == MI_OK)
 80005b4:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d15a      	bne.n	8000672 <main+0x4a6>
          {
            result++;
 80005bc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80005c0:	3301      	adds	r3, #1
 80005c2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            sprintf(str3, "Auth. OK");
 80005c6:	4930      	ldr	r1, [pc, #192]	; (8000688 <main+0x4bc>)
 80005c8:	4830      	ldr	r0, [pc, #192]	; (800068c <main+0x4c0>)
 80005ca:	f003 f8ff 	bl	80037cc <siprintf>
            if (1)
            {
              // Clean-Up the Card:
              card_data[0] = 0xFF;
 80005ce:	23ff      	movs	r3, #255	; 0xff
 80005d0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
              card_data[1] = 0xFF;
 80005d4:	23ff      	movs	r3, #255	; 0xff
 80005d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
              card_data[2] = 0xFF;
 80005da:	23ff      	movs	r3, #255	; 0xff
 80005dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
              card_data[3] = 0xFF;
 80005e0:	23ff      	movs	r3, #255	; 0xff
 80005e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
              card_data[4] = 0xFF;
 80005e6:	23ff      	movs	r3, #255	; 0xff
 80005e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
              card_data[5] = 0xFF;
 80005ec:	23ff      	movs	r3, #255	; 0xff
 80005ee:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
              card_data[6] = 0xFF;  // Access_bits[6]
 80005f2:	23ff      	movs	r3, #255	; 0xff
 80005f4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
              card_data[7] = 0x07;  // Access_bits[7]
 80005f8:	2307      	movs	r3, #7
 80005fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
              card_data[8] = 0x80;  // Access_bits[8]
 80005fe:	2380      	movs	r3, #128	; 0x80
 8000600:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
              card_data[9] = 0x88;  // user_byte[9]
 8000604:	2388      	movs	r3, #136	; 0x88
 8000606:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
              card_data[10] = 0x88; // user_byte[10]
 800060a:	2388      	movs	r3, #136	; 0x88
 800060c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
              card_data[11] = 0x88; // user_byte[11]
 8000610:	2388      	movs	r3, #136	; 0x88
 8000612:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              card_data[12] = 0x88; // user_byte[12]
 8000616:	2388      	movs	r3, #136	; 0x88
 8000618:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
              card_data[13] = 0x88; // user_byte[13]
 800061c:	2388      	movs	r3, #136	; 0x88
 800061e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
              card_data[14] = 0x88; // user_byte[14]
 8000622:	2388      	movs	r3, #136	; 0x88
 8000624:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
              card_data[15] = 0x88; // user_byte[15]
 8000628:	2388      	movs	r3, #136	; 0x88
 800062a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
              HAL_Delay(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f000 fc1c 	bl	8000e6c <HAL_Delay>
              status = MFRC522_Write(3, card_data);
 8000634:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000638:	4619      	mov	r1, r3
 800063a:	2003      	movs	r0, #3
 800063c:	f002 ff14 	bl	8003468 <MFRC522_Write>
 8000640:	4603      	mov	r3, r0
 8000642:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
              if (status == MI_OK)
 8000646:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800064a:	2b00      	cmp	r3, #0
 800064c:	f040 8164 	bne.w	8000918 <main+0x74c>
              {
                result++;
 8000650:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000654:	3301      	adds	r3, #1
 8000656:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                sprintf(str3, "                ");
 800065a:	490d      	ldr	r1, [pc, #52]	; (8000690 <main+0x4c4>)
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <main+0x4c0>)
 800065e:	f003 f8b5 	bl	80037cc <siprintf>
                sprintf(str4, "Card Cleared!");
 8000662:	490c      	ldr	r1, [pc, #48]	; (8000694 <main+0x4c8>)
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <main+0x4cc>)
 8000666:	f003 f8b1 	bl	80037cc <siprintf>
                delay_val = 2000;
 800066a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800066e:	667b      	str	r3, [r7, #100]	; 0x64
 8000670:	e152      	b.n	8000918 <main+0x74c>
              }
            }
          }
          else
          {
            for (int i = 0; i < 16; i++)
 8000672:	2300      	movs	r3, #0
 8000674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000676:	e01a      	b.n	80006ae <main+0x4e2>
 8000678:	080040f0 	.word	0x080040f0
 800067c:	2000008c 	.word	0x2000008c
 8000680:	08004100 	.word	0x08004100
 8000684:	200000a0 	.word	0x200000a0
 8000688:	08004110 	.word	0x08004110
 800068c:	200000b4 	.word	0x200000b4
 8000690:	0800411c 	.word	0x0800411c
 8000694:	08004130 	.word	0x08004130
 8000698:	200000c8 	.word	0x200000c8
            {
              cardstr[i] = 0;
 800069c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006a2:	4413      	add	r3, r2
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 16; i++)
 80006a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006aa:	3301      	adds	r3, #1
 80006ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80006ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	ddf3      	ble.n	800069c <main+0x4d0>
            }
            status = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            // Find cards
            HAL_Delay(1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 fbd6 	bl	8000e6c <HAL_Delay>
            status = MFRC522_Request(PICC_REQIDL, cardstr);
 80006c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006c4:	4619      	mov	r1, r3
 80006c6:	2026      	movs	r0, #38	; 0x26
 80006c8:	f002 fda3 	bl	8003212 <MFRC522_Request>
 80006cc:	4603      	mov	r3, r0
 80006ce:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            HAL_Delay(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 fbca 	bl	8000e6c <HAL_Delay>
            status = MFRC522_Anticoll(cardstr);
 80006d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fe86 	bl	80033ee <MFRC522_Anticoll>
 80006e2:	4603      	mov	r3, r0
 80006e4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            HAL_Delay(1);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f000 fbbf 	bl	8000e6c <HAL_Delay>
            status = MFRC522_SelectTag(cardstr);
 80006ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 ffcf 	bl	8003696 <MFRC522_SelectTag>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            SectorKey[0] = 0xFF;
 80006fe:	23ff      	movs	r3, #255	; 0xff
 8000700:	703b      	strb	r3, [r7, #0]
            SectorKey[1] = 0xFF;
 8000702:	23ff      	movs	r3, #255	; 0xff
 8000704:	707b      	strb	r3, [r7, #1]
            SectorKey[2] = 0xFF;
 8000706:	23ff      	movs	r3, #255	; 0xff
 8000708:	70bb      	strb	r3, [r7, #2]
            SectorKey[3] = 0xFF;
 800070a:	23ff      	movs	r3, #255	; 0xff
 800070c:	70fb      	strb	r3, [r7, #3]
            SectorKey[4] = 0xFF;
 800070e:	23ff      	movs	r3, #255	; 0xff
 8000710:	713b      	strb	r3, [r7, #4]
            SectorKey[5] = 0xFF;
 8000712:	23ff      	movs	r3, #255	; 0xff
 8000714:	717b      	strb	r3, [r7, #5]
            HAL_Delay(1);
 8000716:	2001      	movs	r0, #1
 8000718:	f000 fba8 	bl	8000e6c <HAL_Delay>
            status = MFRC522_Auth(0x60, 3, SectorKey, cardstr);
 800071c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000720:	463a      	mov	r2, r7
 8000722:	2103      	movs	r1, #3
 8000724:	2060      	movs	r0, #96	; 0x60
 8000726:	f002 ff53 	bl	80035d0 <MFRC522_Auth>
 800072a:	4603      	mov	r3, r0
 800072c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if (status == MI_OK)
 8000730:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000734:	2b00      	cmp	r3, #0
 8000736:	f040 80e7 	bne.w	8000908 <main+0x73c>
            {
              if (1)
              {
                card_data[0] = ((Mx1[0][0]) ^ (UID[0])) + ((Mx1[0][1]) ^ (UID[1])) + ((Mx1[0][2]) ^ (UID[2])) + ((Mx1[0][3]) ^ (UID[3])); // 0x11; //KeyA[0]
 800073a:	7a3a      	ldrb	r2, [r7, #8]
 800073c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000740:	4053      	eors	r3, r2
 8000742:	b2da      	uxtb	r2, r3
 8000744:	7a79      	ldrb	r1, [r7, #9]
 8000746:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800074a:	404b      	eors	r3, r1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4413      	add	r3, r2
 8000750:	b2da      	uxtb	r2, r3
 8000752:	7ab9      	ldrb	r1, [r7, #10]
 8000754:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000758:	404b      	eors	r3, r1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4413      	add	r3, r2
 800075e:	b2da      	uxtb	r2, r3
 8000760:	7af9      	ldrb	r1, [r7, #11]
 8000762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000766:	404b      	eors	r3, r1
 8000768:	b2db      	uxtb	r3, r3
 800076a:	4413      	add	r3, r2
 800076c:	b2db      	uxtb	r3, r3
 800076e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                card_data[1] = ((Mx1[1][0]) ^ (UID[0])) + ((Mx1[1][1]) ^ (UID[1])) + ((Mx1[1][2]) ^ (UID[2])) + ((Mx1[1][3]) ^ (UID[3])); // 0x11; //KeyA[0]
 8000772:	7b7a      	ldrb	r2, [r7, #13]
 8000774:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000778:	4053      	eors	r3, r2
 800077a:	b2da      	uxtb	r2, r3
 800077c:	7bb9      	ldrb	r1, [r7, #14]
 800077e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000782:	404b      	eors	r3, r1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4413      	add	r3, r2
 8000788:	b2da      	uxtb	r2, r3
 800078a:	7bf9      	ldrb	r1, [r7, #15]
 800078c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000790:	404b      	eors	r3, r1
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4413      	add	r3, r2
 8000796:	b2da      	uxtb	r2, r3
 8000798:	7c39      	ldrb	r1, [r7, #16]
 800079a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800079e:	404b      	eors	r3, r1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	4413      	add	r3, r2
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                card_data[2] = ((Mx1[2][0]) ^ (UID[0])) + ((Mx1[2][1]) ^ (UID[1])) + ((Mx1[2][2]) ^ (UID[2])) + ((Mx1[2][3]) ^ (UID[3])); // 0x11; //KeyA[0]
 80007aa:	7cba      	ldrb	r2, [r7, #18]
 80007ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007b0:	4053      	eors	r3, r2
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	7cf9      	ldrb	r1, [r7, #19]
 80007b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80007ba:	404b      	eors	r3, r1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	4413      	add	r3, r2
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	7d39      	ldrb	r1, [r7, #20]
 80007c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007c8:	404b      	eors	r3, r1
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4413      	add	r3, r2
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	7d79      	ldrb	r1, [r7, #21]
 80007d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007d6:	404b      	eors	r3, r1
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	4413      	add	r3, r2
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                card_data[3] = ((Mx1[3][0]) ^ (UID[0])) + ((Mx1[3][1]) ^ (UID[1])) + ((Mx1[3][2]) ^ (UID[2])) + ((Mx1[3][3]) ^ (UID[3])); // 0x11; //KeyA[0]
 80007e2:	7dfa      	ldrb	r2, [r7, #23]
 80007e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007e8:	4053      	eors	r3, r2
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	7e39      	ldrb	r1, [r7, #24]
 80007ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80007f2:	404b      	eors	r3, r1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4413      	add	r3, r2
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	7e79      	ldrb	r1, [r7, #25]
 80007fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000800:	404b      	eors	r3, r1
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4413      	add	r3, r2
 8000806:	b2da      	uxtb	r2, r3
 8000808:	7eb9      	ldrb	r1, [r7, #26]
 800080a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800080e:	404b      	eors	r3, r1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4413      	add	r3, r2
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                card_data[4] = ((Mx1[4][0]) ^ (UID[0])) + ((Mx1[4][1]) ^ (UID[1])) + ((Mx1[4][2]) ^ (UID[2])) + ((Mx1[4][3]) ^ (UID[3])); // 0x11; //KeyA[0]
 800081a:	7f3a      	ldrb	r2, [r7, #28]
 800081c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000820:	4053      	eors	r3, r2
 8000822:	b2da      	uxtb	r2, r3
 8000824:	7f79      	ldrb	r1, [r7, #29]
 8000826:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800082a:	404b      	eors	r3, r1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4413      	add	r3, r2
 8000830:	b2da      	uxtb	r2, r3
 8000832:	7fb9      	ldrb	r1, [r7, #30]
 8000834:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000838:	404b      	eors	r3, r1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4413      	add	r3, r2
 800083e:	b2da      	uxtb	r2, r3
 8000840:	7ff9      	ldrb	r1, [r7, #31]
 8000842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000846:	404b      	eors	r3, r1
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4413      	add	r3, r2
 800084c:	b2db      	uxtb	r3, r3
 800084e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
                card_data[5] = ((Mx1[5][0]) ^ (UID[0])) + ((Mx1[5][1]) ^ (UID[1])) + ((Mx1[5][2]) ^ (UID[2])) + ((Mx1[5][3]) ^ (UID[3])); // 0x11; //KeyA[0]
 8000852:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000856:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800085a:	4053      	eors	r3, r2
 800085c:	b2da      	uxtb	r2, r3
 800085e:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8000862:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000866:	404b      	eors	r3, r1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4413      	add	r3, r2
 800086c:	b2da      	uxtb	r2, r3
 800086e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000872:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000876:	404b      	eors	r3, r1
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4413      	add	r3, r2
 800087c:	b2da      	uxtb	r2, r3
 800087e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000886:	404b      	eors	r3, r1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4413      	add	r3, r2
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
                card_data[6] = 0xFF;                                                                                                      // Access_bits[6]
 8000892:	23ff      	movs	r3, #255	; 0xff
 8000894:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                card_data[7] = 0x07;                                                                                                      // Access_bits[7]
 8000898:	2307      	movs	r3, #7
 800089a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                card_data[8] = 0x80;                                                                                                      // Access_bits[8]
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                card_data[9] = 0x88;                                                                                                      // user_byte[9]
 80008a4:	2388      	movs	r3, #136	; 0x88
 80008a6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                card_data[10] = 0x88;                                                                                                     // user_byte[10]
 80008aa:	2388      	movs	r3, #136	; 0x88
 80008ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                card_data[11] = 0x88;                                                                                                     // user_byte[11]
 80008b0:	2388      	movs	r3, #136	; 0x88
 80008b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                card_data[12] = 0x88;                                                                                                     // user_byte[12]
 80008b6:	2388      	movs	r3, #136	; 0x88
 80008b8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
                card_data[13] = 0x88;                                                                                                     // user_byte[13]
 80008bc:	2388      	movs	r3, #136	; 0x88
 80008be:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                card_data[14] = 0x88;                                                                                                     // user_byte[14]
 80008c2:	2388      	movs	r3, #136	; 0x88
 80008c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                card_data[15] = 0x88;                                                                                                     // user_byte[15]
 80008c8:	2388      	movs	r3, #136	; 0x88
 80008ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                HAL_Delay(1);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 facc 	bl	8000e6c <HAL_Delay>
                status = MFRC522_Write(3, card_data);
 80008d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008d8:	4619      	mov	r1, r3
 80008da:	2003      	movs	r0, #3
 80008dc:	f002 fdc4 	bl	8003468 <MFRC522_Write>
 80008e0:	4603      	mov	r3, r0
 80008e2:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
                if (status == MI_OK)
 80008e6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d114      	bne.n	8000918 <main+0x74c>
                {
                  result++;
 80008ee:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80008f2:	3301      	adds	r3, #1
 80008f4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                  sprintf(str3, "Card Set!");
 80008f8:	4920      	ldr	r1, [pc, #128]	; (800097c <main+0x7b0>)
 80008fa:	4821      	ldr	r0, [pc, #132]	; (8000980 <main+0x7b4>)
 80008fc:	f002 ff66 	bl	80037cc <siprintf>
                  delay_val = 2000;
 8000900:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000904:	667b      	str	r3, [r7, #100]	; 0x64
 8000906:	e007      	b.n	8000918 <main+0x74c>
              {

                sprintf(str4, "New Card!");
              }
            }
            else if (status != MI_OK)
 8000908:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800090c:	2b00      	cmp	r3, #0
 800090e:	d003      	beq.n	8000918 <main+0x74c>
            {
              sprintf(str3, "Auth. Error");
 8000910:	491c      	ldr	r1, [pc, #112]	; (8000984 <main+0x7b8>)
 8000912:	481b      	ldr	r0, [pc, #108]	; (8000980 <main+0x7b4>)
 8000914:	f002 ff5a 	bl	80037cc <siprintf>
            }
          }
          HAL_Delay(1);
 8000918:	2001      	movs	r0, #1
 800091a:	f000 faa7 	bl	8000e6c <HAL_Delay>
          MFRC522_StopCrypto1();
 800091e:	f002 ff1a 	bl	8003756 <MFRC522_StopCrypto1>
        }
      }
      HAL_Delay(1);
 8000922:	2001      	movs	r0, #1
 8000924:	f000 faa2 	bl	8000e6c <HAL_Delay>
      MFRC522_Halt();
 8000928:	f002 fef7 	bl	800371a <MFRC522_Halt>


      HAL_Delay(delay_val);
 800092c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800092e:	f000 fa9d 	bl	8000e6c <HAL_Delay>
      delay_val = 1000;
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	667b      	str	r3, [r7, #100]	; 0x64
      sprintf(str1, "                ");
 8000938:	4913      	ldr	r1, [pc, #76]	; (8000988 <main+0x7bc>)
 800093a:	4814      	ldr	r0, [pc, #80]	; (800098c <main+0x7c0>)
 800093c:	f002 ff46 	bl	80037cc <siprintf>
      sprintf(str2, "                ");
 8000940:	4911      	ldr	r1, [pc, #68]	; (8000988 <main+0x7bc>)
 8000942:	4813      	ldr	r0, [pc, #76]	; (8000990 <main+0x7c4>)
 8000944:	f002 ff42 	bl	80037cc <siprintf>
      sprintf(str3, "                ");
 8000948:	490f      	ldr	r1, [pc, #60]	; (8000988 <main+0x7bc>)
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <main+0x7b4>)
 800094c:	f002 ff3e 	bl	80037cc <siprintf>
      sprintf(str4, "                ");
 8000950:	490d      	ldr	r1, [pc, #52]	; (8000988 <main+0x7bc>)
 8000952:	4810      	ldr	r0, [pc, #64]	; (8000994 <main+0x7c8>)
 8000954:	f002 ff3a 	bl	80037cc <siprintf>
 8000958:	e4da      	b.n	8000310 <main+0x144>
    }
    else
    {
      sprintf(str1, "Waiting for Card");
 800095a:	490f      	ldr	r1, [pc, #60]	; (8000998 <main+0x7cc>)
 800095c:	480b      	ldr	r0, [pc, #44]	; (800098c <main+0x7c0>)
 800095e:	f002 ff35 	bl	80037cc <siprintf>

      sprintf(str2, "                ");
 8000962:	4909      	ldr	r1, [pc, #36]	; (8000988 <main+0x7bc>)
 8000964:	480a      	ldr	r0, [pc, #40]	; (8000990 <main+0x7c4>)
 8000966:	f002 ff31 	bl	80037cc <siprintf>

      sprintf(str3, "                ");
 800096a:	4907      	ldr	r1, [pc, #28]	; (8000988 <main+0x7bc>)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <main+0x7b4>)
 800096e:	f002 ff2d 	bl	80037cc <siprintf>

      sprintf(str4, "                ");
 8000972:	4905      	ldr	r1, [pc, #20]	; (8000988 <main+0x7bc>)
 8000974:	4807      	ldr	r0, [pc, #28]	; (8000994 <main+0x7c8>)
 8000976:	f002 ff29 	bl	80037cc <siprintf>
    for (int i = 0; i < 16; i++)
 800097a:	e4c9      	b.n	8000310 <main+0x144>
 800097c:	08004140 	.word	0x08004140
 8000980:	200000b4 	.word	0x200000b4
 8000984:	0800414c 	.word	0x0800414c
 8000988:	0800411c 	.word	0x0800411c
 800098c:	2000008c 	.word	0x2000008c
 8000990:	200000a0 	.word	0x200000a0
 8000994:	200000c8 	.word	0x200000c8
 8000998:	08004158 	.word	0x08004158

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b090      	sub	sp, #64	; 0x40
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0318 	add.w	r3, r7, #24
 80009a6:	2228      	movs	r2, #40	; 0x28
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 ff06 	bl	80037bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009be:	2302      	movs	r3, #2
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c2:	2301      	movs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c6:	2310      	movs	r3, #16
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ce:	f107 0318 	add.w	r3, r7, #24
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fdc8 	bl	8001568 <HAL_RCC_OscConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009de:	f000 f818 	bl	8000a12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 f836 	bl	8001a6c <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a06:	f000 f804 	bl	8000a12 <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3740      	adds	r7, #64	; 0x40
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a16:	b672      	cpsid	i
}
 8000a18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <Error_Handler+0x8>

08000a1c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a22:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <MX_SPI2_Init+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a50:	2210      	movs	r2, #16
 8000a52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a68:	220a      	movs	r2, #10
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a6e:	f001 f995 	bl	8001d9c <HAL_SPI_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a78:	f7ff ffcb 	bl	8000a12 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000120 	.word	0x20000120
 8000a84:	40003800 	.word	0x40003800

08000a88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a1c      	ldr	r2, [pc, #112]	; (8000b14 <HAL_SPI_MspInit+0x8c>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d131      	bne.n	8000b0c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <HAL_SPI_MspInit+0x90>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	4a1a      	ldr	r2, [pc, #104]	; (8000b18 <HAL_SPI_MspInit+0x90>)
 8000aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab2:	61d3      	str	r3, [r2, #28]
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_SPI_MspInit+0x90>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_SPI_MspInit+0x90>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <HAL_SPI_MspInit+0x90>)
 8000ac6:	f043 0308 	orr.w	r3, r3, #8
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_SPI_MspInit+0x90>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0308 	and.w	r3, r3, #8
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000ad8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000adc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	4619      	mov	r1, r3
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <HAL_SPI_MspInit+0x94>)
 8000aee:	f000 fb9f 	bl	8001230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000af2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000af6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	4619      	mov	r1, r3
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <HAL_SPI_MspInit+0x94>)
 8000b08:	f000 fb92 	bl	8001230 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40003800 	.word	0x40003800
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010c00 	.word	0x40010c00

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6193      	str	r3, [r2, #24]
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	61d3      	str	r3, [r2, #28]
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_MspInit+0x60>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_MspInit+0x60>)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40010000 	.word	0x40010000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr

08000bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bca:	f000 f933 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <USART1_IRQHandler+0x10>)
 8000bda:	f001 fe99 	bl	8002910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000017c 	.word	0x2000017c

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f002 fda6 	bl	8003768 <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20005000 	.word	0x20005000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	20000178 	.word	0x20000178
 8000c50:	200001d8 	.word	0x200001d8

08000c54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART1_UART_Init+0x4c>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <MX_USART1_UART_Init+0x50>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_USART1_UART_Init+0x4c>)
 8000c6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_USART1_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_USART1_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART1_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART1_UART_Init+0x4c>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART1_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART1_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USART1_UART_Init+0x4c>)
 8000c98:	f001 fdec 	bl	8002874 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ca2:	f7ff feb6 	bl	8000a12 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000017c 	.word	0x2000017c
 8000cb0:	40013800 	.word	0x40013800

08000cb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a20      	ldr	r2, [pc, #128]	; (8000d50 <HAL_UART_MspInit+0x9c>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d139      	bne.n	8000d48 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <HAL_UART_MspInit+0xa0>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <HAL_UART_MspInit+0xa0>)
 8000cda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_UART_MspInit+0xa0>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_UART_MspInit+0xa0>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a18      	ldr	r2, [pc, #96]	; (8000d54 <HAL_UART_MspInit+0xa0>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_UART_MspInit+0xa0>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	4619      	mov	r1, r3
 8000d18:	480f      	ldr	r0, [pc, #60]	; (8000d58 <HAL_UART_MspInit+0xa4>)
 8000d1a:	f000 fa89 	bl	8001230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	4619      	mov	r1, r3
 8000d32:	4809      	ldr	r0, [pc, #36]	; (8000d58 <HAL_UART_MspInit+0xa4>)
 8000d34:	f000 fa7c 	bl	8001230 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2025      	movs	r0, #37	; 0x25
 8000d3e:	f000 f990 	bl	8001062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d42:	2025      	movs	r0, #37	; 0x25
 8000d44:	f000 f9a9 	bl	800109a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40013800 	.word	0x40013800
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010800 	.word	0x40010800

08000d5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	; (8000d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d82:	f7ff ff67 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f002 fcf5 	bl	8003774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff fa1f 	bl	80001cc <main>
  bx lr
 8000d8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d98:	08004200 	.word	0x08004200
  ldr r2, =_sbss
 8000d9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000da0:	200001d4 	.word	0x200001d4

08000da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_2_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x28>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x28>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f947 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	200f      	movs	r0, #15
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff feac 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f95f 	bl	80010b6 <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f927 	bl	8001062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <HAL_IncTick+0x20>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000008 	.word	0x20000008
 8000e54:	200001c0 	.word	0x200001c0

08000e58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	200001c0 	.word	0x200001c0

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff fff0 	bl	8000e58 <HAL_GetTick>
 8000e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e84:	d005      	beq.n	8000e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_Delay+0x44>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e92:	bf00      	nop
 8000e94:	f7ff ffe0 	bl	8000e58 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d8f7      	bhi.n	8000e94 <HAL_Delay+0x28>
  {
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4906      	ldr	r1, [pc, #24]	; (8000f4c <__NVIC_EnableIRQ+0x34>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001018:	d301      	bcc.n	800101e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e00f      	b.n	800103e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <SysTick_Config+0x40>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	210f      	movs	r1, #15
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f7ff ff90 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SysTick_Config+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <SysTick_Config+0x40>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff2d 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff42 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff90 	bl	8000fa4 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5f 	bl	8000f50 <__NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff35 	bl	8000f18 <__NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffa2 	bl	8001008 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b085      	sub	sp, #20
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d008      	beq.n	80010f6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2204      	movs	r2, #4
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e020      	b.n	8001138 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 020e 	bic.w	r2, r2, #14
 8001104:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0201 	bic.w	r2, r2, #1
 8001114:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f202 	lsl.w	r2, r1, r2
 8001124:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001136:	7bfb      	ldrb	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
	...

08001144 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001156:	2b02      	cmp	r3, #2
 8001158:	d005      	beq.n	8001166 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2204      	movs	r2, #4
 800115e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
 8001164:	e051      	b.n	800120a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 020e 	bic.w	r2, r2, #14
 8001174:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0201 	bic.w	r2, r2, #1
 8001184:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a22      	ldr	r2, [pc, #136]	; (8001214 <HAL_DMA_Abort_IT+0xd0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d029      	beq.n	80011e4 <HAL_DMA_Abort_IT+0xa0>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a20      	ldr	r2, [pc, #128]	; (8001218 <HAL_DMA_Abort_IT+0xd4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d022      	beq.n	80011e0 <HAL_DMA_Abort_IT+0x9c>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a1f      	ldr	r2, [pc, #124]	; (800121c <HAL_DMA_Abort_IT+0xd8>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d01a      	beq.n	80011da <HAL_DMA_Abort_IT+0x96>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <HAL_DMA_Abort_IT+0xdc>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d012      	beq.n	80011d4 <HAL_DMA_Abort_IT+0x90>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <HAL_DMA_Abort_IT+0xe0>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d00a      	beq.n	80011ce <HAL_DMA_Abort_IT+0x8a>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <HAL_DMA_Abort_IT+0xe4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d102      	bne.n	80011c8 <HAL_DMA_Abort_IT+0x84>
 80011c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011c6:	e00e      	b.n	80011e6 <HAL_DMA_Abort_IT+0xa2>
 80011c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011cc:	e00b      	b.n	80011e6 <HAL_DMA_Abort_IT+0xa2>
 80011ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d2:	e008      	b.n	80011e6 <HAL_DMA_Abort_IT+0xa2>
 80011d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d8:	e005      	b.n	80011e6 <HAL_DMA_Abort_IT+0xa2>
 80011da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011de:	e002      	b.n	80011e6 <HAL_DMA_Abort_IT+0xa2>
 80011e0:	2310      	movs	r3, #16
 80011e2:	e000      	b.n	80011e6 <HAL_DMA_Abort_IT+0xa2>
 80011e4:	2301      	movs	r3, #1
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <HAL_DMA_Abort_IT+0xe8>)
 80011e8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	4798      	blx	r3
    } 
  }
  return status;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40020008 	.word	0x40020008
 8001218:	4002001c 	.word	0x4002001c
 800121c:	40020030 	.word	0x40020030
 8001220:	40020044 	.word	0x40020044
 8001224:	40020058 	.word	0x40020058
 8001228:	4002006c 	.word	0x4002006c
 800122c:	40020000 	.word	0x40020000

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b08b      	sub	sp, #44	; 0x2c
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001242:	e169      	b.n	8001518 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001244:	2201      	movs	r2, #1
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	429a      	cmp	r2, r3
 800125e:	f040 8158 	bne.w	8001512 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	4a9a      	ldr	r2, [pc, #616]	; (80014d0 <HAL_GPIO_Init+0x2a0>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d05e      	beq.n	800132a <HAL_GPIO_Init+0xfa>
 800126c:	4a98      	ldr	r2, [pc, #608]	; (80014d0 <HAL_GPIO_Init+0x2a0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d875      	bhi.n	800135e <HAL_GPIO_Init+0x12e>
 8001272:	4a98      	ldr	r2, [pc, #608]	; (80014d4 <HAL_GPIO_Init+0x2a4>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d058      	beq.n	800132a <HAL_GPIO_Init+0xfa>
 8001278:	4a96      	ldr	r2, [pc, #600]	; (80014d4 <HAL_GPIO_Init+0x2a4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d86f      	bhi.n	800135e <HAL_GPIO_Init+0x12e>
 800127e:	4a96      	ldr	r2, [pc, #600]	; (80014d8 <HAL_GPIO_Init+0x2a8>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d052      	beq.n	800132a <HAL_GPIO_Init+0xfa>
 8001284:	4a94      	ldr	r2, [pc, #592]	; (80014d8 <HAL_GPIO_Init+0x2a8>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d869      	bhi.n	800135e <HAL_GPIO_Init+0x12e>
 800128a:	4a94      	ldr	r2, [pc, #592]	; (80014dc <HAL_GPIO_Init+0x2ac>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d04c      	beq.n	800132a <HAL_GPIO_Init+0xfa>
 8001290:	4a92      	ldr	r2, [pc, #584]	; (80014dc <HAL_GPIO_Init+0x2ac>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d863      	bhi.n	800135e <HAL_GPIO_Init+0x12e>
 8001296:	4a92      	ldr	r2, [pc, #584]	; (80014e0 <HAL_GPIO_Init+0x2b0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d046      	beq.n	800132a <HAL_GPIO_Init+0xfa>
 800129c:	4a90      	ldr	r2, [pc, #576]	; (80014e0 <HAL_GPIO_Init+0x2b0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d85d      	bhi.n	800135e <HAL_GPIO_Init+0x12e>
 80012a2:	2b12      	cmp	r3, #18
 80012a4:	d82a      	bhi.n	80012fc <HAL_GPIO_Init+0xcc>
 80012a6:	2b12      	cmp	r3, #18
 80012a8:	d859      	bhi.n	800135e <HAL_GPIO_Init+0x12e>
 80012aa:	a201      	add	r2, pc, #4	; (adr r2, 80012b0 <HAL_GPIO_Init+0x80>)
 80012ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b0:	0800132b 	.word	0x0800132b
 80012b4:	08001305 	.word	0x08001305
 80012b8:	08001317 	.word	0x08001317
 80012bc:	08001359 	.word	0x08001359
 80012c0:	0800135f 	.word	0x0800135f
 80012c4:	0800135f 	.word	0x0800135f
 80012c8:	0800135f 	.word	0x0800135f
 80012cc:	0800135f 	.word	0x0800135f
 80012d0:	0800135f 	.word	0x0800135f
 80012d4:	0800135f 	.word	0x0800135f
 80012d8:	0800135f 	.word	0x0800135f
 80012dc:	0800135f 	.word	0x0800135f
 80012e0:	0800135f 	.word	0x0800135f
 80012e4:	0800135f 	.word	0x0800135f
 80012e8:	0800135f 	.word	0x0800135f
 80012ec:	0800135f 	.word	0x0800135f
 80012f0:	0800135f 	.word	0x0800135f
 80012f4:	0800130d 	.word	0x0800130d
 80012f8:	08001321 	.word	0x08001321
 80012fc:	4a79      	ldr	r2, [pc, #484]	; (80014e4 <HAL_GPIO_Init+0x2b4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d013      	beq.n	800132a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001302:	e02c      	b.n	800135e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	623b      	str	r3, [r7, #32]
          break;
 800130a:	e029      	b.n	8001360 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	3304      	adds	r3, #4
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	e024      	b.n	8001360 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	3308      	adds	r3, #8
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e01f      	b.n	8001360 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	330c      	adds	r3, #12
 8001326:	623b      	str	r3, [r7, #32]
          break;
 8001328:	e01a      	b.n	8001360 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d102      	bne.n	8001338 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001332:	2304      	movs	r3, #4
 8001334:	623b      	str	r3, [r7, #32]
          break;
 8001336:	e013      	b.n	8001360 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d105      	bne.n	800134c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001340:	2308      	movs	r3, #8
 8001342:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	611a      	str	r2, [r3, #16]
          break;
 800134a:	e009      	b.n	8001360 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800134c:	2308      	movs	r3, #8
 800134e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	615a      	str	r2, [r3, #20]
          break;
 8001356:	e003      	b.n	8001360 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
          break;
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x130>
          break;
 800135e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2bff      	cmp	r3, #255	; 0xff
 8001364:	d801      	bhi.n	800136a <HAL_GPIO_Init+0x13a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	e001      	b.n	800136e <HAL_GPIO_Init+0x13e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3304      	adds	r3, #4
 800136e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2bff      	cmp	r3, #255	; 0xff
 8001374:	d802      	bhi.n	800137c <HAL_GPIO_Init+0x14c>
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	e002      	b.n	8001382 <HAL_GPIO_Init+0x152>
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	3b08      	subs	r3, #8
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	210f      	movs	r1, #15
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	401a      	ands	r2, r3
 8001394:	6a39      	ldr	r1, [r7, #32]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	431a      	orrs	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 80b1 	beq.w	8001512 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013b0:	4b4d      	ldr	r3, [pc, #308]	; (80014e8 <HAL_GPIO_Init+0x2b8>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a4c      	ldr	r2, [pc, #304]	; (80014e8 <HAL_GPIO_Init+0x2b8>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b4a      	ldr	r3, [pc, #296]	; (80014e8 <HAL_GPIO_Init+0x2b8>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013c8:	4a48      	ldr	r2, [pc, #288]	; (80014ec <HAL_GPIO_Init+0x2bc>)
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	4013      	ands	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a40      	ldr	r2, [pc, #256]	; (80014f0 <HAL_GPIO_Init+0x2c0>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d013      	beq.n	800141c <HAL_GPIO_Init+0x1ec>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a3f      	ldr	r2, [pc, #252]	; (80014f4 <HAL_GPIO_Init+0x2c4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d00d      	beq.n	8001418 <HAL_GPIO_Init+0x1e8>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a3e      	ldr	r2, [pc, #248]	; (80014f8 <HAL_GPIO_Init+0x2c8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d007      	beq.n	8001414 <HAL_GPIO_Init+0x1e4>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a3d      	ldr	r2, [pc, #244]	; (80014fc <HAL_GPIO_Init+0x2cc>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d101      	bne.n	8001410 <HAL_GPIO_Init+0x1e0>
 800140c:	2303      	movs	r3, #3
 800140e:	e006      	b.n	800141e <HAL_GPIO_Init+0x1ee>
 8001410:	2304      	movs	r3, #4
 8001412:	e004      	b.n	800141e <HAL_GPIO_Init+0x1ee>
 8001414:	2302      	movs	r3, #2
 8001416:	e002      	b.n	800141e <HAL_GPIO_Init+0x1ee>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <HAL_GPIO_Init+0x1ee>
 800141c:	2300      	movs	r3, #0
 800141e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001420:	f002 0203 	and.w	r2, r2, #3
 8001424:	0092      	lsls	r2, r2, #2
 8001426:	4093      	lsls	r3, r2
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	4313      	orrs	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800142e:	492f      	ldr	r1, [pc, #188]	; (80014ec <HAL_GPIO_Init+0x2bc>)
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001448:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	492c      	ldr	r1, [pc, #176]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001456:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	43db      	mvns	r3, r3
 800145e:	4928      	ldr	r1, [pc, #160]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 8001460:	4013      	ands	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d006      	beq.n	800147e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4922      	ldr	r1, [pc, #136]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	43db      	mvns	r3, r3
 8001486:	491e      	ldr	r1, [pc, #120]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 8001488:	4013      	ands	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d006      	beq.n	80014a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	4918      	ldr	r1, [pc, #96]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4914      	ldr	r1, [pc, #80]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d021      	beq.n	8001504 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	490e      	ldr	r1, [pc, #56]	; (8001500 <HAL_GPIO_Init+0x2d0>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	60cb      	str	r3, [r1, #12]
 80014cc:	e021      	b.n	8001512 <HAL_GPIO_Init+0x2e2>
 80014ce:	bf00      	nop
 80014d0:	10320000 	.word	0x10320000
 80014d4:	10310000 	.word	0x10310000
 80014d8:	10220000 	.word	0x10220000
 80014dc:	10210000 	.word	0x10210000
 80014e0:	10120000 	.word	0x10120000
 80014e4:	10110000 	.word	0x10110000
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010000 	.word	0x40010000
 80014f0:	40010800 	.word	0x40010800
 80014f4:	40010c00 	.word	0x40010c00
 80014f8:	40011000 	.word	0x40011000
 80014fc:	40011400 	.word	0x40011400
 8001500:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_GPIO_Init+0x304>)
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	43db      	mvns	r3, r3
 800150c:	4909      	ldr	r1, [pc, #36]	; (8001534 <HAL_GPIO_Init+0x304>)
 800150e:	4013      	ands	r3, r2
 8001510:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	3301      	adds	r3, #1
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	fa22 f303 	lsr.w	r3, r2, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	f47f ae8e 	bne.w	8001244 <HAL_GPIO_Init+0x14>
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	372c      	adds	r7, #44	; 0x2c
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	40010400 	.word	0x40010400

08001538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
 8001544:	4613      	mov	r3, r2
 8001546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001548:	787b      	ldrb	r3, [r7, #1]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001554:	e003      	b.n	800155e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	041a      	lsls	r2, r3, #16
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	611a      	str	r2, [r3, #16]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e272      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8087 	beq.w	8001696 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001588:	4b92      	ldr	r3, [pc, #584]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b04      	cmp	r3, #4
 8001592:	d00c      	beq.n	80015ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001594:	4b8f      	ldr	r3, [pc, #572]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b08      	cmp	r3, #8
 800159e:	d112      	bne.n	80015c6 <HAL_RCC_OscConfig+0x5e>
 80015a0:	4b8c      	ldr	r3, [pc, #560]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ac:	d10b      	bne.n	80015c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ae:	4b89      	ldr	r3, [pc, #548]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d06c      	beq.n	8001694 <HAL_RCC_OscConfig+0x12c>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d168      	bne.n	8001694 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e24c      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x76>
 80015d0:	4b80      	ldr	r3, [pc, #512]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a7f      	ldr	r2, [pc, #508]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	e02e      	b.n	800163c <HAL_RCC_OscConfig+0xd4>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x98>
 80015e6:	4b7b      	ldr	r3, [pc, #492]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a7a      	ldr	r2, [pc, #488]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b78      	ldr	r3, [pc, #480]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a77      	ldr	r2, [pc, #476]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e01d      	b.n	800163c <HAL_RCC_OscConfig+0xd4>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0xbc>
 800160a:	4b72      	ldr	r3, [pc, #456]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a71      	ldr	r2, [pc, #452]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b6f      	ldr	r3, [pc, #444]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6e      	ldr	r2, [pc, #440]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0xd4>
 8001624:	4b6b      	ldr	r3, [pc, #428]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a6a      	ldr	r2, [pc, #424]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 800162a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b68      	ldr	r3, [pc, #416]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a67      	ldr	r2, [pc, #412]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d013      	beq.n	800166c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fc08 	bl	8000e58 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fc04 	bl	8000e58 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e200      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b5d      	ldr	r3, [pc, #372]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0xe4>
 800166a:	e014      	b.n	8001696 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fbf4 	bl	8000e58 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fbf0 	bl	8000e58 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e1ec      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	4b53      	ldr	r3, [pc, #332]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x10c>
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d063      	beq.n	800176a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016a2:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00b      	beq.n	80016c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ae:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d11c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x18c>
 80016ba:	4b46      	ldr	r3, [pc, #280]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d116      	bne.n	80016f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_RCC_OscConfig+0x176>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e1c0      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4939      	ldr	r1, [pc, #228]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	e03a      	b.n	800176a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d020      	beq.n	800173e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fc:	4b36      	ldr	r3, [pc, #216]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff fba9 	bl	8000e58 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fba5 	bl	8000e58 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1a1      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4927      	ldr	r1, [pc, #156]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
 800173c:	e015      	b.n	800176a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <HAL_RCC_OscConfig+0x270>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fb88 	bl	8000e58 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174c:	f7ff fb84 	bl	8000e58 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e180      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d03a      	beq.n	80017ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d019      	beq.n	80017b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_RCC_OscConfig+0x274>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff fb68 	bl	8000e58 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff fb64 	bl	8000e58 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e160      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f000 fad8 	bl	8001d60 <RCC_Delay>
 80017b0:	e01c      	b.n	80017ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_RCC_OscConfig+0x274>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b8:	f7ff fb4e 	bl	8000e58 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017be:	e00f      	b.n	80017e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c0:	f7ff fb4a 	bl	8000e58 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d908      	bls.n	80017e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e146      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	42420000 	.word	0x42420000
 80017dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e0:	4b92      	ldr	r3, [pc, #584]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1e9      	bne.n	80017c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80a6 	beq.w	8001946 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fe:	4b8b      	ldr	r3, [pc, #556]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10d      	bne.n	8001826 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b88      	ldr	r3, [pc, #544]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a87      	ldr	r2, [pc, #540]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	61d3      	str	r3, [r2, #28]
 8001816:	4b85      	ldr	r3, [pc, #532]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001822:	2301      	movs	r3, #1
 8001824:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001826:	4b82      	ldr	r3, [pc, #520]	; (8001a30 <HAL_RCC_OscConfig+0x4c8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d118      	bne.n	8001864 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001832:	4b7f      	ldr	r3, [pc, #508]	; (8001a30 <HAL_RCC_OscConfig+0x4c8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a7e      	ldr	r2, [pc, #504]	; (8001a30 <HAL_RCC_OscConfig+0x4c8>)
 8001838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183e:	f7ff fb0b 	bl	8000e58 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001846:	f7ff fb07 	bl	8000e58 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b64      	cmp	r3, #100	; 0x64
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e103      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	4b75      	ldr	r3, [pc, #468]	; (8001a30 <HAL_RCC_OscConfig+0x4c8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x312>
 800186c:	4b6f      	ldr	r3, [pc, #444]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4a6e      	ldr	r2, [pc, #440]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6213      	str	r3, [r2, #32]
 8001878:	e02d      	b.n	80018d6 <HAL_RCC_OscConfig+0x36e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x334>
 8001882:	4b6a      	ldr	r3, [pc, #424]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	4a69      	ldr	r2, [pc, #420]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	6213      	str	r3, [r2, #32]
 800188e:	4b67      	ldr	r3, [pc, #412]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4a66      	ldr	r2, [pc, #408]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 8001894:	f023 0304 	bic.w	r3, r3, #4
 8001898:	6213      	str	r3, [r2, #32]
 800189a:	e01c      	b.n	80018d6 <HAL_RCC_OscConfig+0x36e>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d10c      	bne.n	80018be <HAL_RCC_OscConfig+0x356>
 80018a4:	4b61      	ldr	r3, [pc, #388]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4a60      	ldr	r2, [pc, #384]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	6213      	str	r3, [r2, #32]
 80018b0:	4b5e      	ldr	r3, [pc, #376]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4a5d      	ldr	r2, [pc, #372]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6213      	str	r3, [r2, #32]
 80018bc:	e00b      	b.n	80018d6 <HAL_RCC_OscConfig+0x36e>
 80018be:	4b5b      	ldr	r3, [pc, #364]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4a5a      	ldr	r2, [pc, #360]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	6213      	str	r3, [r2, #32]
 80018ca:	4b58      	ldr	r3, [pc, #352]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	4a57      	ldr	r2, [pc, #348]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	f023 0304 	bic.w	r3, r3, #4
 80018d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d015      	beq.n	800190a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f7ff fabb 	bl	8000e58 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fab7 	bl	8000e58 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0b1      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fc:	4b4b      	ldr	r3, [pc, #300]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0ee      	beq.n	80018e6 <HAL_RCC_OscConfig+0x37e>
 8001908:	e014      	b.n	8001934 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190a:	f7ff faa5 	bl	8000e58 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff faa1 	bl	8000e58 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e09b      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001928:	4b40      	ldr	r3, [pc, #256]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1ee      	bne.n	8001912 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d105      	bne.n	8001946 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800193a:	4b3c      	ldr	r3, [pc, #240]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a3b      	ldr	r2, [pc, #236]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 8001940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001944:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8087 	beq.w	8001a5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001950:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b08      	cmp	r3, #8
 800195a:	d061      	beq.n	8001a20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d146      	bne.n	80019f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001964:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <HAL_RCC_OscConfig+0x4cc>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff fa75 	bl	8000e58 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff fa71 	bl	8000e58 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e06d      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001984:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001998:	d108      	bne.n	80019ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800199a:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	4921      	ldr	r1, [pc, #132]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a19      	ldr	r1, [r3, #32]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	430b      	orrs	r3, r1
 80019be:	491b      	ldr	r1, [pc, #108]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_RCC_OscConfig+0x4cc>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fa45 	bl	8000e58 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d2:	f7ff fa41 	bl	8000e58 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e03d      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x46a>
 80019f0:	e035      	b.n	8001a5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_RCC_OscConfig+0x4cc>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7ff fa2e 	bl	8000e58 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff fa2a 	bl	8000e58 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e026      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x498>
 8001a1e:	e01e      	b.n	8001a5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d107      	bne.n	8001a38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e019      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40007000 	.word	0x40007000
 8001a34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_OscConfig+0x500>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d001      	beq.n	8001a5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000

08001a6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0d0      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b6a      	ldr	r3, [pc, #424]	; (8001c2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d910      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b67      	ldr	r3, [pc, #412]	; (8001c2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 0207 	bic.w	r2, r3, #7
 8001a96:	4965      	ldr	r1, [pc, #404]	; (8001c2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b63      	ldr	r3, [pc, #396]	; (8001c2c <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0b8      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac8:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4a58      	ldr	r2, [pc, #352]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ad2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae0:	4b53      	ldr	r3, [pc, #332]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4a52      	ldr	r2, [pc, #328]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	494d      	ldr	r1, [pc, #308]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d040      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d115      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e07f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2a:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e073      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e06b      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4a:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f023 0203 	bic.w	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4936      	ldr	r1, [pc, #216]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b5c:	f7ff f97c 	bl	8000e58 <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7ff f978 	bl	8000e58 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e053      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 020c 	and.w	r2, r3, #12
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d1eb      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_RCC_ClockConfig+0x1c0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d210      	bcs.n	8001bbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 0207 	bic.w	r2, r3, #7
 8001ba2:	4922      	ldr	r1, [pc, #136]	; (8001c2c <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e032      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4916      	ldr	r1, [pc, #88]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	490e      	ldr	r1, [pc, #56]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bfa:	f000 f821 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	490a      	ldr	r1, [pc, #40]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0c:	5ccb      	ldrb	r3, [r1, r3]
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x1cc>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_RCC_ClockConfig+0x1d0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f8da 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40022000 	.word	0x40022000
 8001c30:	40021000 	.word	0x40021000
 8001c34:	080041ac 	.word	0x080041ac
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c40:	b490      	push	{r4, r7}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c46:	4b29      	ldr	r3, [pc, #164]	; (8001cec <HAL_RCC_GetSysClockFreq+0xac>)
 8001c48:	1d3c      	adds	r4, r7, #4
 8001c4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c50:	f240 2301 	movw	r3, #513	; 0x201
 8001c54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d002      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x40>
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d003      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0x46>
 8001c7e:	e02b      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c80:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c82:	623b      	str	r3, [r7, #32]
      break;
 8001c84:	e02b      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	0c9b      	lsrs	r3, r3, #18
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3328      	adds	r3, #40	; 0x28
 8001c90:	443b      	add	r3, r7
 8001c92:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c96:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	0c5b      	lsrs	r3, r3, #17
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	3328      	adds	r3, #40	; 0x28
 8001cae:	443b      	add	r3, r7
 8001cb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cba:	fb03 f202 	mul.w	r2, r3, r2
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc6:	e004      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	623b      	str	r3, [r7, #32]
      break;
 8001cd6:	e002      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cda:	623b      	str	r3, [r7, #32]
      break;
 8001cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cde:	6a3b      	ldr	r3, [r7, #32]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc90      	pop	{r4, r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	0800419c 	.word	0x0800419c
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	007a1200 	.word	0x007a1200
 8001cf8:	003d0900 	.word	0x003d0900

08001cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b02      	ldr	r3, [pc, #8]	; (8001d0c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	20000000 	.word	0x20000000

08001d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d14:	f7ff fff2 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4903      	ldr	r1, [pc, #12]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	080041bc 	.word	0x080041bc

08001d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d3c:	f7ff ffde 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	0adb      	lsrs	r3, r3, #11
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	4903      	ldr	r1, [pc, #12]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d4e:	5ccb      	ldrb	r3, [r1, r3]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	080041bc 	.word	0x080041bc

08001d60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <RCC_Delay+0x34>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <RCC_Delay+0x38>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	0a5b      	lsrs	r3, r3, #9
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d7c:	bf00      	nop
  }
  while (Delay --);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1e5a      	subs	r2, r3, #1
 8001d82:	60fa      	str	r2, [r7, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f9      	bne.n	8001d7c <RCC_Delay+0x1c>
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	20000000 	.word	0x20000000
 8001d98:	10624dd3 	.word	0x10624dd3

08001d9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e076      	b.n	8001e9c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d108      	bne.n	8001dc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dbe:	d009      	beq.n	8001dd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
 8001dc6:	e005      	b.n	8001dd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe fe4a 	bl	8000a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e58:	ea42 0103 	orr.w	r1, r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	0c1a      	lsrs	r2, r3, #16
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f002 0204 	and.w	r2, r2, #4
 8001e7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_SPI_Transmit+0x22>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e126      	b.n	8002114 <HAL_SPI_Transmit+0x270>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ece:	f7fe ffc3 	bl	8000e58 <HAL_GetTick>
 8001ed2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d002      	beq.n	8001eea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ee8:	e10b      	b.n	8002102 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <HAL_SPI_Transmit+0x52>
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d102      	bne.n	8001efc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001efa:	e102      	b.n	8002102 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2203      	movs	r2, #3
 8001f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	88fa      	ldrh	r2, [r7, #6]
 8001f1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f42:	d10f      	bne.n	8001f64 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6e:	2b40      	cmp	r3, #64	; 0x40
 8001f70:	d007      	beq.n	8001f82 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f8a:	d14b      	bne.n	8002024 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_SPI_Transmit+0xf6>
 8001f94:	8afb      	ldrh	r3, [r7, #22]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d13e      	bne.n	8002018 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	1c9a      	adds	r2, r3, #2
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fbe:	e02b      	b.n	8002018 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d112      	bne.n	8001ff4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	881a      	ldrh	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	1c9a      	adds	r2, r3, #2
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ff2:	e011      	b.n	8002018 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ff4:	f7fe ff30 	bl	8000e58 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d803      	bhi.n	800200c <HAL_SPI_Transmit+0x168>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200a:	d102      	bne.n	8002012 <HAL_SPI_Transmit+0x16e>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002016:	e074      	b.n	8002102 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1ce      	bne.n	8001fc0 <HAL_SPI_Transmit+0x11c>
 8002022:	e04c      	b.n	80020be <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <HAL_SPI_Transmit+0x18e>
 800202c:	8afb      	ldrh	r3, [r7, #22]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d140      	bne.n	80020b4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	330c      	adds	r3, #12
 800203c:	7812      	ldrb	r2, [r2, #0]
 800203e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002058:	e02c      	b.n	80020b4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b02      	cmp	r3, #2
 8002066:	d113      	bne.n	8002090 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	330c      	adds	r3, #12
 8002072:	7812      	ldrb	r2, [r2, #0]
 8002074:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002084:	b29b      	uxth	r3, r3
 8002086:	3b01      	subs	r3, #1
 8002088:	b29a      	uxth	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	86da      	strh	r2, [r3, #54]	; 0x36
 800208e:	e011      	b.n	80020b4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002090:	f7fe fee2 	bl	8000e58 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d803      	bhi.n	80020a8 <HAL_SPI_Transmit+0x204>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a6:	d102      	bne.n	80020ae <HAL_SPI_Transmit+0x20a>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020b2:	e026      	b.n	8002102 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1cd      	bne.n	800205a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	6839      	ldr	r1, [r7, #0]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 fbb8 	bl	8002838 <SPI_EndRxTxTransaction>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2220      	movs	r2, #32
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10a      	bne.n	80020f2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	77fb      	strb	r3, [r7, #31]
 80020fe:	e000      	b.n	8002102 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002100:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002112:	7ffb      	ldrb	r3, [r7, #31]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	4613      	mov	r3, r2
 800212a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002138:	d112      	bne.n	8002160 <HAL_SPI_Receive+0x44>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10e      	bne.n	8002160 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2204      	movs	r2, #4
 8002146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800214a:	88fa      	ldrh	r2, [r7, #6]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4613      	mov	r3, r2
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f8f1 	bl	800233e <HAL_SPI_TransmitReceive>
 800215c:	4603      	mov	r3, r0
 800215e:	e0ea      	b.n	8002336 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_SPI_Receive+0x52>
 800216a:	2302      	movs	r3, #2
 800216c:	e0e3      	b.n	8002336 <HAL_SPI_Receive+0x21a>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002176:	f7fe fe6f 	bl	8000e58 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	d002      	beq.n	800218e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002188:	2302      	movs	r3, #2
 800218a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800218c:	e0ca      	b.n	8002324 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_SPI_Receive+0x7e>
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800219e:	e0c1      	b.n	8002324 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2204      	movs	r2, #4
 80021a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	88fa      	ldrh	r2, [r7, #6]
 80021be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e6:	d10f      	bne.n	8002208 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002206:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002212:	2b40      	cmp	r3, #64	; 0x40
 8002214:	d007      	beq.n	8002226 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002224:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d162      	bne.n	80022f4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800222e:	e02e      	b.n	800228e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	d115      	bne.n	800226a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f103 020c 	add.w	r2, r3, #12
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002268:	e011      	b.n	800228e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800226a:	f7fe fdf5 	bl	8000e58 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d803      	bhi.n	8002282 <HAL_SPI_Receive+0x166>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d102      	bne.n	8002288 <HAL_SPI_Receive+0x16c>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d102      	bne.n	800228e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800228c:	e04a      	b.n	8002324 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1cb      	bne.n	8002230 <HAL_SPI_Receive+0x114>
 8002298:	e031      	b.n	80022fe <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d113      	bne.n	80022d0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	b292      	uxth	r2, r2
 80022b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	1c9a      	adds	r2, r3, #2
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022ce:	e011      	b.n	80022f4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022d0:	f7fe fdc2 	bl	8000e58 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d803      	bhi.n	80022e8 <HAL_SPI_Receive+0x1cc>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e6:	d102      	bne.n	80022ee <HAL_SPI_Receive+0x1d2>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80022f2:	e017      	b.n	8002324 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1cd      	bne.n	800229a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	6839      	ldr	r1, [r7, #0]
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fa46 	bl	8002794 <SPI_EndRxTransaction>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	75fb      	strb	r3, [r7, #23]
 8002320:	e000      	b.n	8002324 <HAL_SPI_Receive+0x208>
  }

error :
 8002322:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002334:	7dfb      	ldrb	r3, [r7, #23]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b08c      	sub	sp, #48	; 0x30
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800234c:	2301      	movs	r3, #1
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_SPI_TransmitReceive+0x26>
 8002360:	2302      	movs	r3, #2
 8002362:	e18a      	b.n	800267a <HAL_SPI_TransmitReceive+0x33c>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800236c:	f7fe fd74 	bl	8000e58 <HAL_GetTick>
 8002370:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002386:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800238a:	2b01      	cmp	r3, #1
 800238c:	d00f      	beq.n	80023ae <HAL_SPI_TransmitReceive+0x70>
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002394:	d107      	bne.n	80023a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d103      	bne.n	80023a6 <HAL_SPI_TransmitReceive+0x68>
 800239e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d003      	beq.n	80023ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
 80023a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023ac:	e15b      	b.n	8002666 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_SPI_TransmitReceive+0x82>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <HAL_SPI_TransmitReceive+0x82>
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d103      	bne.n	80023c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023c6:	e14e      	b.n	8002666 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d003      	beq.n	80023dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2205      	movs	r2, #5
 80023d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	887a      	ldrh	r2, [r7, #2]
 80023f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	887a      	ldrh	r2, [r7, #2]
 80023fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241c:	2b40      	cmp	r3, #64	; 0x40
 800241e:	d007      	beq.n	8002430 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800242e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002438:	d178      	bne.n	800252c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_SPI_TransmitReceive+0x10a>
 8002442:	8b7b      	ldrh	r3, [r7, #26]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d166      	bne.n	8002516 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	881a      	ldrh	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	1c9a      	adds	r2, r3, #2
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800246c:	e053      	b.n	8002516 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b02      	cmp	r3, #2
 800247a:	d11b      	bne.n	80024b4 <HAL_SPI_TransmitReceive+0x176>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d016      	beq.n	80024b4 <HAL_SPI_TransmitReceive+0x176>
 8002486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002488:	2b01      	cmp	r3, #1
 800248a:	d113      	bne.n	80024b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	881a      	ldrh	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	1c9a      	adds	r2, r3, #2
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d119      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x1b8>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d014      	beq.n	80024f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d6:	b292      	uxth	r2, r2
 80024d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	1c9a      	adds	r2, r3, #2
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024f2:	2301      	movs	r3, #1
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024f6:	f7fe fcaf 	bl	8000e58 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002502:	429a      	cmp	r2, r3
 8002504:	d807      	bhi.n	8002516 <HAL_SPI_TransmitReceive+0x1d8>
 8002506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d003      	beq.n	8002516 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002514:	e0a7      	b.n	8002666 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1a6      	bne.n	800246e <HAL_SPI_TransmitReceive+0x130>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1a1      	bne.n	800246e <HAL_SPI_TransmitReceive+0x130>
 800252a:	e07c      	b.n	8002626 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_SPI_TransmitReceive+0x1fc>
 8002534:	8b7b      	ldrh	r3, [r7, #26]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d16b      	bne.n	8002612 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	330c      	adds	r3, #12
 8002544:	7812      	ldrb	r2, [r2, #0]
 8002546:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002560:	e057      	b.n	8002612 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b02      	cmp	r3, #2
 800256e:	d11c      	bne.n	80025aa <HAL_SPI_TransmitReceive+0x26c>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d017      	beq.n	80025aa <HAL_SPI_TransmitReceive+0x26c>
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d114      	bne.n	80025aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	330c      	adds	r3, #12
 800258a:	7812      	ldrb	r2, [r2, #0]
 800258c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d119      	bne.n	80025ec <HAL_SPI_TransmitReceive+0x2ae>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d014      	beq.n	80025ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025e8:	2301      	movs	r3, #1
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025ec:	f7fe fc34 	bl	8000e58 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d803      	bhi.n	8002604 <HAL_SPI_TransmitReceive+0x2c6>
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002602:	d102      	bne.n	800260a <HAL_SPI_TransmitReceive+0x2cc>
 8002604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002610:	e029      	b.n	8002666 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1a2      	bne.n	8002562 <HAL_SPI_TransmitReceive+0x224>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d19d      	bne.n	8002562 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002628:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f904 	bl	8002838 <SPI_EndRxTxTransaction>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2220      	movs	r2, #32
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002642:	e010      	b.n	8002666 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10b      	bne.n	8002664 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	e000      	b.n	8002666 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002664:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800267a:	4618      	mov	r0, r3
 800267c:	3730      	adds	r7, #48	; 0x30
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002694:	f7fe fbe0 	bl	8000e58 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	4413      	add	r3, r2
 80026a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026a4:	f7fe fbd8 	bl	8000e58 <HAL_GetTick>
 80026a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	015b      	lsls	r3, r3, #5
 80026b0:	0d1b      	lsrs	r3, r3, #20
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ba:	e054      	b.n	8002766 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d050      	beq.n	8002766 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026c4:	f7fe fbc8 	bl	8000e58 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d902      	bls.n	80026da <SPI_WaitFlagStateUntilTimeout+0x56>
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d13d      	bne.n	8002756 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026f2:	d111      	bne.n	8002718 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026fc:	d004      	beq.n	8002708 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002706:	d107      	bne.n	8002718 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002716:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002720:	d10f      	bne.n	8002742 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002740:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e017      	b.n	8002786 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3b01      	subs	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4013      	ands	r3, r2
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	429a      	cmp	r2, r3
 8002774:	bf0c      	ite	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	2300      	movne	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	429a      	cmp	r2, r3
 8002782:	d19b      	bne.n	80026bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3720      	adds	r7, #32
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000000 	.word	0x20000000

08002794 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027a8:	d111      	bne.n	80027ce <SPI_EndRxTransaction+0x3a>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b2:	d004      	beq.n	80027be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027bc:	d107      	bne.n	80027ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027cc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027d6:	d117      	bne.n	8002808 <SPI_EndRxTransaction+0x74>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e0:	d112      	bne.n	8002808 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2200      	movs	r2, #0
 80027ea:	2101      	movs	r1, #1
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7ff ff49 	bl	8002684 <SPI_WaitFlagStateUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01a      	beq.n	800282e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e013      	b.n	8002830 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2200      	movs	r2, #0
 8002810:	2180      	movs	r1, #128	; 0x80
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff ff36 	bl	8002684 <SPI_WaitFlagStateUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	f043 0220 	orr.w	r2, r3, #32
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e000      	b.n	8002830 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2200      	movs	r2, #0
 800284c:	2180      	movs	r1, #128	; 0x80
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff ff18 	bl	8002684 <SPI_WaitFlagStateUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	f043 0220 	orr.w	r2, r3, #32
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e000      	b.n	800286c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e03f      	b.n	8002906 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fa0a 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2224      	movs	r2, #36	; 0x24
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fb49 	bl	8002f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	; 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_UART_IRQHandler+0x52>
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fa4f 	bl	8002dfe <UART_Receive_IT>
      return;
 8002960:	e17b      	b.n	8002c5a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80b1 	beq.w	8002acc <HAL_UART_IRQHandler+0x1bc>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <HAL_UART_IRQHandler+0x70>
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80a6 	beq.w	8002acc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_UART_IRQHandler+0x90>
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_UART_IRQHandler+0xb0>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f043 0202 	orr.w	r2, r3, #2
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_UART_IRQHandler+0xd0>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f043 0204 	orr.w	r2, r3, #4
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00f      	beq.n	8002a0a <HAL_UART_IRQHandler+0xfa>
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d104      	bne.n	80029fe <HAL_UART_IRQHandler+0xee>
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f043 0208 	orr.w	r2, r3, #8
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 811e 	beq.w	8002c50 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <HAL_UART_IRQHandler+0x11e>
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f9e8 	bl	8002dfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf14      	ite	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <HAL_UART_IRQHandler+0x146>
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d031      	beq.n	8002aba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f92a 	bl	8002cb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d023      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a78:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d013      	beq.n	8002aaa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	4a76      	ldr	r2, [pc, #472]	; (8002c60 <HAL_UART_IRQHandler+0x350>)
 8002a88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fb58 	bl	8001144 <HAL_DMA_Abort_IT>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d016      	beq.n	8002ac8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa8:	e00e      	b.n	8002ac8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f8ec 	bl	8002c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab0:	e00a      	b.n	8002ac8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8e8 	bl	8002c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab8:	e006      	b.n	8002ac8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8e4 	bl	8002c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ac6:	e0c3      	b.n	8002c50 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac8:	bf00      	nop
    return;
 8002aca:	e0c1      	b.n	8002c50 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	f040 80a1 	bne.w	8002c18 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 809b 	beq.w	8002c18 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8095 	beq.w	8002c18 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d04e      	beq.n	8002bb0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002b1c:	8a3b      	ldrh	r3, [r7, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8098 	beq.w	8002c54 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b28:	8a3a      	ldrh	r2, [r7, #16]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	f080 8092 	bcs.w	8002c54 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8a3a      	ldrh	r2, [r7, #16]
 8002b34:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d02b      	beq.n	8002b98 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b4e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b6e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0210 	bic.w	r2, r2, #16
 8002b8c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe fa9b 	bl	80010ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f876 	bl	8002c9a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002bae:	e051      	b.n	8002c54 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d047      	beq.n	8002c58 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002bc8:	8a7b      	ldrh	r3, [r7, #18]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d044      	beq.n	8002c58 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bdc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0210 	bic.w	r2, r2, #16
 8002c0a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c0c:	8a7b      	ldrh	r3, [r7, #18]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f842 	bl	8002c9a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c16:	e01f      	b.n	8002c58 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_UART_IRQHandler+0x324>
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f87f 	bl	8002d30 <UART_Transmit_IT>
    return;
 8002c32:	e012      	b.n	8002c5a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <HAL_UART_IRQHandler+0x34a>
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f8c0 	bl	8002dce <UART_EndTransmit_IT>
    return;
 8002c4e:	e004      	b.n	8002c5a <HAL_UART_IRQHandler+0x34a>
    return;
 8002c50:	bf00      	nop
 8002c52:	e002      	b.n	8002c5a <HAL_UART_IRQHandler+0x34a>
      return;
 8002c54:	bf00      	nop
 8002c56:	e000      	b.n	8002c5a <HAL_UART_IRQHandler+0x34a>
      return;
 8002c58:	bf00      	nop
  }
}
 8002c5a:	3728      	adds	r7, #40	; 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	08002d09 	.word	0x08002d09

08002c64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002cc6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0210 	bic.w	r2, r2, #16
 8002cee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f7ff ffb0 	bl	8002c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b21      	cmp	r3, #33	; 0x21
 8002d42:	d13e      	bne.n	8002dc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4c:	d114      	bne.n	8002d78 <UART_Transmit_IT+0x48>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d110      	bne.n	8002d78 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	1c9a      	adds	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	621a      	str	r2, [r3, #32]
 8002d76:	e008      	b.n	8002d8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	1c59      	adds	r1, r3, #1
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6211      	str	r1, [r2, #32]
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	4619      	mov	r1, r3
 8002d98:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10f      	bne.n	8002dbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e000      	b.n	8002dc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
  }
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ff38 	bl	8002c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b22      	cmp	r3, #34	; 0x22
 8002e10:	f040 8099 	bne.w	8002f46 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1c:	d117      	bne.n	8002e4e <UART_Receive_IT+0x50>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d113      	bne.n	8002e4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	1c9a      	adds	r2, r3, #2
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e4c:	e026      	b.n	8002e9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e60:	d007      	beq.n	8002e72 <UART_Receive_IT+0x74>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10a      	bne.n	8002e80 <UART_Receive_IT+0x82>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	e008      	b.n	8002e92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d148      	bne.n	8002f42 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0220 	bic.w	r2, r2, #32
 8002ebe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ece:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d123      	bne.n	8002f38 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0210 	bic.w	r2, r2, #16
 8002f04:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b10      	cmp	r3, #16
 8002f12:	d10a      	bne.n	8002f2a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff feb2 	bl	8002c9a <HAL_UARTEx_RxEventCallback>
 8002f36:	e002      	b.n	8002f3e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff fe9c 	bl	8002c76 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e002      	b.n	8002f48 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	e000      	b.n	8002f48 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
  }
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f8a:	f023 030c 	bic.w	r3, r3, #12
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2c      	ldr	r2, [pc, #176]	; (8003064 <UART_SetConfig+0x114>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d103      	bne.n	8002fc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fb8:	f7fe febe 	bl	8001d38 <HAL_RCC_GetPCLK2Freq>
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	e002      	b.n	8002fc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fc0:	f7fe fea6 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8002fc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009a      	lsls	r2, r3, #2
 8002fd0:	441a      	add	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	4a22      	ldr	r2, [pc, #136]	; (8003068 <UART_SetConfig+0x118>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	0119      	lsls	r1, r3, #4
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	009a      	lsls	r2, r3, #2
 8002ff0:	441a      	add	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <UART_SetConfig+0x118>)
 8002ffe:	fba3 0302 	umull	r0, r3, r3, r2
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2064      	movs	r0, #100	; 0x64
 8003006:	fb00 f303 	mul.w	r3, r0, r3
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	3332      	adds	r3, #50	; 0x32
 8003010:	4a15      	ldr	r2, [pc, #84]	; (8003068 <UART_SetConfig+0x118>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800301c:	4419      	add	r1, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	009a      	lsls	r2, r3, #2
 8003028:	441a      	add	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	fbb2 f2f3 	udiv	r2, r2, r3
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <UART_SetConfig+0x118>)
 8003036:	fba3 0302 	umull	r0, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	2064      	movs	r0, #100	; 0x64
 800303e:	fb00 f303 	mul.w	r3, r0, r3
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	3332      	adds	r3, #50	; 0x32
 8003048:	4a07      	ldr	r2, [pc, #28]	; (8003068 <UART_SetConfig+0x118>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	f003 020f 	and.w	r2, r3, #15
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	440a      	add	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40013800 	.word	0x40013800
 8003068:	51eb851f 	.word	0x51eb851f

0800306c <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	460a      	mov	r2, r1
 8003076:	71fb      	strb	r3, [r7, #7]
 8003078:	4613      	mov	r3, r2
 800307a:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003086:	b2db      	uxtb	r3, r3
 8003088:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800308a:	2200      	movs	r2, #0
 800308c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003090:	480d      	ldr	r0, [pc, #52]	; (80030c8 <Write_MFRC522+0x5c>)
 8003092:	f7fe fa51 	bl	8001538 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi2, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003096:	f107 010f 	add.w	r1, r7, #15
 800309a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800309e:	2201      	movs	r2, #1
 80030a0:	480a      	ldr	r0, [pc, #40]	; (80030cc <Write_MFRC522+0x60>)
 80030a2:	f7fe feff 	bl	8001ea4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80030a6:	1db9      	adds	r1, r7, #6
 80030a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80030ac:	2201      	movs	r2, #1
 80030ae:	4807      	ldr	r0, [pc, #28]	; (80030cc <Write_MFRC522+0x60>)
 80030b0:	f7fe fef8 	bl	8001ea4 <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80030b4:	2201      	movs	r2, #1
 80030b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ba:	4803      	ldr	r0, [pc, #12]	; (80030c8 <Write_MFRC522+0x5c>)
 80030bc:	f7fe fa3c 	bl	8001538 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40010c00 	.word	0x40010c00
 80030cc:	20000120 	.word	0x20000120

080030d0 <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	b25b      	sxtb	r3, r3
 80030e0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80030e4:	b25b      	sxtb	r3, r3
 80030e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80030f0:	2200      	movs	r2, #0
 80030f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030f6:	480f      	ldr	r0, [pc, #60]	; (8003134 <Read_MFRC522+0x64>)
 80030f8:	f7fe fa1e 	bl	8001538 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi2, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi2, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80030fc:	f107 010e 	add.w	r1, r7, #14
 8003100:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003104:	2201      	movs	r2, #1
 8003106:	480c      	ldr	r0, [pc, #48]	; (8003138 <Read_MFRC522+0x68>)
 8003108:	f7fe fecc 	bl	8001ea4 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 800310c:	f107 010f 	add.w	r1, r7, #15
 8003110:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003114:	2201      	movs	r2, #1
 8003116:	4808      	ldr	r0, [pc, #32]	; (8003138 <Read_MFRC522+0x68>)
 8003118:	f7ff f800 	bl	800211c <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800311c:	2201      	movs	r2, #1
 800311e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003122:	4804      	ldr	r0, [pc, #16]	; (8003134 <Read_MFRC522+0x64>)
 8003124:	f7fe fa08 	bl	8001538 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003128:	7bfb      	ldrb	r3, [r7, #15]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40010c00 	.word	0x40010c00
 8003138:	20000120 	.word	0x20000120

0800313c <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	460a      	mov	r2, r1
 8003146:	71fb      	strb	r3, [r7, #7]
 8003148:	4613      	mov	r3, r2
 800314a:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff ffbe 	bl	80030d0 <Read_MFRC522>
 8003154:	4603      	mov	r3, r0
 8003156:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	79bb      	ldrb	r3, [r7, #6]
 800315c:	4313      	orrs	r3, r2
 800315e:	b2da      	uxtb	r2, r3
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff81 	bl	800306c <Write_MFRC522>
}
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	460a      	mov	r2, r1
 800317c:	71fb      	strb	r3, [r7, #7]
 800317e:	4613      	mov	r3, r2
 8003180:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ffa3 	bl	80030d0 <Read_MFRC522>
 800318a:	4603      	mov	r3, r0
 800318c:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800318e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003192:	43db      	mvns	r3, r3
 8003194:	b25a      	sxtb	r2, r3
 8003196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319a:	4013      	ands	r3, r2
 800319c:	b25b      	sxtb	r3, r3
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff61 	bl	800306c <Write_MFRC522>
}
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 80031b6:	2103      	movs	r1, #3
 80031b8:	2014      	movs	r0, #20
 80031ba:	f7ff ffbf 	bl	800313c <SetBitMask>
}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80031c6:	210f      	movs	r1, #15
 80031c8:	2001      	movs	r0, #1
 80031ca:	f7ff ff4f 	bl	800306c <Write_MFRC522>
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  MFRC522_Reset();
 80031d6:	f7ff fff4 	bl	80031c2 <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80031da:	2180      	movs	r1, #128	; 0x80
 80031dc:	202a      	movs	r0, #42	; 0x2a
 80031de:	f7ff ff45 	bl	800306c <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 80031e2:	21a9      	movs	r1, #169	; 0xa9
 80031e4:	202b      	movs	r0, #43	; 0x2b
 80031e6:	f7ff ff41 	bl	800306c <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 80031ea:	2103      	movs	r1, #3
 80031ec:	202d      	movs	r0, #45	; 0x2d
 80031ee:	f7ff ff3d 	bl	800306c <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 80031f2:	21e8      	movs	r1, #232	; 0xe8
 80031f4:	202c      	movs	r0, #44	; 0x2c
 80031f6:	f7ff ff39 	bl	800306c <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 80031fa:	2140      	movs	r1, #64	; 0x40
 80031fc:	2015      	movs	r0, #21
 80031fe:	f7ff ff35 	bl	800306c <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 8003202:	213d      	movs	r1, #61	; 0x3d
 8003204:	2011      	movs	r0, #17
 8003206:	f7ff ff31 	bl	800306c <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 800320a:	f7ff ffd2 	bl	80031b2 <AntennaOn>
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}

08003212 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af02      	add	r7, sp, #8
 8003218:	4603      	mov	r3, r0
 800321a:	6039      	str	r1, [r7, #0]
 800321c:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 800321e:	2107      	movs	r1, #7
 8003220:	200d      	movs	r0, #13
 8003222:	f7ff ff23 	bl	800306c <Write_MFRC522>

  TagType[0] = reqMode;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	79fa      	ldrb	r2, [r7, #7]
 800322a:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800322c:	f107 0308 	add.w	r3, r7, #8
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2201      	movs	r2, #1
 8003236:	6839      	ldr	r1, [r7, #0]
 8003238:	200c      	movs	r0, #12
 800323a:	f000 f80f 	bl	800325c <MFRC522_ToCard>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <MFRC522_Request+0x3c>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b10      	cmp	r3, #16
 800324c:	d001      	beq.n	8003252 <MFRC522_Request+0x40>
    status = MI_ERR;
 800324e:	2302      	movs	r3, #2
 8003250:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 800325c:	b590      	push	{r4, r7, lr}
 800325e:	b089      	sub	sp, #36	; 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	4603      	mov	r3, r0
 8003268:	73fb      	strb	r3, [r7, #15]
 800326a:	4613      	mov	r3, r2
 800326c:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 800326e:	2302      	movs	r3, #2
 8003270:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 8003272:	2300      	movs	r3, #0
 8003274:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 8003276:	2300      	movs	r3, #0
 8003278:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	2b0c      	cmp	r3, #12
 800327e:	d006      	beq.n	800328e <MFRC522_ToCard+0x32>
 8003280:	2b0e      	cmp	r3, #14
 8003282:	d109      	bne.n	8003298 <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8003284:	2312      	movs	r3, #18
 8003286:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8003288:	2310      	movs	r3, #16
 800328a:	777b      	strb	r3, [r7, #29]
        break;
 800328c:	e005      	b.n	800329a <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 800328e:	2377      	movs	r3, #119	; 0x77
 8003290:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8003292:	2330      	movs	r3, #48	; 0x30
 8003294:	777b      	strb	r3, [r7, #29]
        break;
 8003296:	e000      	b.n	800329a <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 8003298:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 800329a:	7fbb      	ldrb	r3, [r7, #30]
 800329c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	4619      	mov	r1, r3
 80032a4:	2002      	movs	r0, #2
 80032a6:	f7ff fee1 	bl	800306c <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	2004      	movs	r0, #4
 80032ae:	f7ff ff60 	bl	8003172 <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 80032b2:	2180      	movs	r1, #128	; 0x80
 80032b4:	200a      	movs	r0, #10
 80032b6:	f7ff ff41 	bl	800313c <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 80032ba:	2100      	movs	r1, #0
 80032bc:	2001      	movs	r0, #1
 80032be:	f7ff fed5 	bl	800306c <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e00a      	b.n	80032de <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	4413      	add	r3, r2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	4619      	mov	r1, r3
 80032d2:	2009      	movs	r0, #9
 80032d4:	f7ff feca 	bl	800306c <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	3301      	adds	r3, #1
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	7bbb      	ldrb	r3, [r7, #14]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d3f0      	bcc.n	80032c8 <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	4619      	mov	r1, r3
 80032ea:	2001      	movs	r0, #1
 80032ec:	f7ff febe 	bl	800306c <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d103      	bne.n	80032fe <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 80032f6:	2180      	movs	r1, #128	; 0x80
 80032f8:	200d      	movs	r0, #13
 80032fa:	f7ff ff1f 	bl	800313c <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80032fe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003302:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 8003304:	2004      	movs	r0, #4
 8003306:	f7ff fee3 	bl	80030d0 <Read_MFRC522>
 800330a:	4603      	mov	r3, r0
 800330c:	773b      	strb	r3, [r7, #28]
    i--;
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	3b01      	subs	r3, #1
 8003312:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <MFRC522_ToCard+0xd4>
 800331a:	7f3b      	ldrb	r3, [r7, #28]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d105      	bne.n	8003330 <MFRC522_ToCard+0xd4>
 8003324:	7f3a      	ldrb	r2, [r7, #28]
 8003326:	7f7b      	ldrb	r3, [r7, #29]
 8003328:	4013      	ands	r3, r2
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0e9      	beq.n	8003304 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8003330:	2180      	movs	r1, #128	; 0x80
 8003332:	200d      	movs	r0, #13
 8003334:	f7ff ff1d 	bl	8003172 <ClearBitMask>

  if (i != 0)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d052      	beq.n	80033e4 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 800333e:	2006      	movs	r0, #6
 8003340:	f7ff fec6 	bl	80030d0 <Read_MFRC522>
 8003344:	4603      	mov	r3, r0
 8003346:	f003 031b 	and.w	r3, r3, #27
 800334a:	2b00      	cmp	r3, #0
 800334c:	d148      	bne.n	80033e0 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 8003352:	7f3a      	ldrb	r2, [r7, #28]
 8003354:	7fbb      	ldrb	r3, [r7, #30]
 8003356:	4013      	ands	r3, r2
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8003362:	2301      	movs	r3, #1
 8003364:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d13b      	bne.n	80033e4 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 800336c:	200a      	movs	r0, #10
 800336e:	f7ff feaf 	bl	80030d0 <Read_MFRC522>
 8003372:	4603      	mov	r3, r0
 8003374:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8003376:	200c      	movs	r0, #12
 8003378:	f7ff feaa 	bl	80030d0 <Read_MFRC522>
 800337c:	4603      	mov	r3, r0
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 800338a:	7f3b      	ldrb	r3, [r7, #28]
 800338c:	3b01      	subs	r3, #1
 800338e:	00da      	lsls	r2, r3, #3
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	4413      	add	r3, r2
 8003394:	461a      	mov	r2, r3
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	e004      	b.n	80033a6 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 800339c:	7f3b      	ldrb	r3, [r7, #28]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	461a      	mov	r2, r3
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 80033a6:	7f3b      	ldrb	r3, [r7, #28]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <MFRC522_ToCard+0x154>
        {
          n = 1;
 80033ac:	2301      	movs	r3, #1
 80033ae:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 80033b0:	7f3b      	ldrb	r3, [r7, #28]
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d901      	bls.n	80033ba <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 80033b6:	2310      	movs	r3, #16
 80033b8:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e00a      	b.n	80033d6 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	18d4      	adds	r4, r2, r3
 80033c6:	2009      	movs	r0, #9
 80033c8:	f7ff fe82 	bl	80030d0 <Read_MFRC522>
 80033cc:	4603      	mov	r3, r0
 80033ce:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	3301      	adds	r3, #1
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	7f3b      	ldrb	r3, [r7, #28]
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d3f0      	bcc.n	80033c0 <MFRC522_ToCard+0x164>
 80033de:	e001      	b.n	80033e4 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 80033e0:	2302      	movs	r3, #2
 80033e2:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 80033e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3724      	adds	r7, #36	; 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd90      	pop	{r4, r7, pc}

080033ee <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b086      	sub	sp, #24
 80033f2:	af02      	add	r7, sp, #8
 80033f4:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80033fa:	2100      	movs	r1, #0
 80033fc:	200d      	movs	r0, #13
 80033fe:	f7ff fe35 	bl	800306c <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2293      	movs	r2, #147	; 0x93
 8003406:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3301      	adds	r3, #1
 800340c:	2220      	movs	r2, #32
 800340e:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003410:	f107 0308 	add.w	r3, r7, #8
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	200c      	movs	r0, #12
 800341e:	f7ff ff1d 	bl	800325c <MFRC522_ToCard>
 8003422:	4603      	mov	r3, r0
 8003424:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d118      	bne.n	800345e <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 800342c:	2300      	movs	r3, #0
 800342e:	73bb      	strb	r3, [r7, #14]
 8003430:	e009      	b.n	8003446 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 8003432:	7bbb      	ldrb	r3, [r7, #14]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4413      	add	r3, r2
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	7b7b      	ldrb	r3, [r7, #13]
 800343c:	4053      	eors	r3, r2
 800343e:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 8003440:	7bbb      	ldrb	r3, [r7, #14]
 8003442:	3301      	adds	r3, #1
 8003444:	73bb      	strb	r3, [r7, #14]
 8003446:	7bbb      	ldrb	r3, [r7, #14]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d9f2      	bls.n	8003432 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 800344c:	7bbb      	ldrb	r3, [r7, #14]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4413      	add	r3, r2
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	7b7a      	ldrb	r2, [r7, #13]
 8003456:	429a      	cmp	r2, r3
 8003458:	d001      	beq.n	800345e <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 800345a:	2302      	movs	r3, #2
 800345c:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <MFRC522_Write>:
 * Description: Write block data
 * Input parameters: blockAddr - block address; writeData - to 16-byte data block write
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Write(u_char blockAddr, u_char *writeData)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08c      	sub	sp, #48	; 0x30
 800346c:	af02      	add	r7, sp, #8
 800346e:	4603      	mov	r3, r0
 8003470:	6039      	str	r1, [r7, #0]
 8003472:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint recvBits;
  u_char i;
  u_char buff[18];

  buff[0] = PICC_WRITE;
 8003474:	23a0      	movs	r3, #160	; 0xa0
 8003476:	733b      	strb	r3, [r7, #12]
  buff[1] = blockAddr;
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	737b      	strb	r3, [r7, #13]
  CalulateCRC(buff, 2, &buff[2]);
 800347c:	f107 030c 	add.w	r3, r7, #12
 8003480:	1c9a      	adds	r2, r3, #2
 8003482:	f107 030c 	add.w	r3, r7, #12
 8003486:	2102      	movs	r1, #2
 8003488:	4618      	mov	r0, r3
 800348a:	f000 f858 	bl	800353e <CalulateCRC>
  status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
 800348e:	f107 020c 	add.w	r2, r7, #12
 8003492:	f107 010c 	add.w	r1, r7, #12
 8003496:	f107 0320 	add.w	r3, r7, #32
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	2204      	movs	r2, #4
 80034a0:	200c      	movs	r0, #12
 80034a2:	f7ff fedb 	bl	800325c <MFRC522_ToCard>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((status != MI_OK))// || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
 80034ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <MFRC522_Write+0x52>
  {
    status = MI_ERR;
 80034b4:	2302      	movs	r3, #2
 80034b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status == MI_OK)
 80034ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d137      	bne.n	8003532 <MFRC522_Write+0xca>
  {
    for (i=0; i<16; i++)		//Data to the FIFO write 16Byte
 80034c2:	2300      	movs	r3, #0
 80034c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80034c8:	e00f      	b.n	80034ea <MFRC522_Write+0x82>
    {
      buff[i] = *(writeData+i);
 80034ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	441a      	add	r2, r3
 80034d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034d6:	7812      	ldrb	r2, [r2, #0]
 80034d8:	3328      	adds	r3, #40	; 0x28
 80034da:	443b      	add	r3, r7
 80034dc:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (i=0; i<16; i++)		//Data to the FIFO write 16Byte
 80034e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034e4:	3301      	adds	r3, #1
 80034e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80034ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034ee:	2b0f      	cmp	r3, #15
 80034f0:	d9eb      	bls.n	80034ca <MFRC522_Write+0x62>
    }
    CalulateCRC(buff, 16, &buff[16]);
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	f103 0210 	add.w	r2, r3, #16
 80034fa:	f107 030c 	add.w	r3, r7, #12
 80034fe:	2110      	movs	r1, #16
 8003500:	4618      	mov	r0, r3
 8003502:	f000 f81c 	bl	800353e <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
 8003506:	f107 020c 	add.w	r2, r7, #12
 800350a:	f107 010c 	add.w	r1, r7, #12
 800350e:	f107 0320 	add.w	r3, r7, #32
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	2212      	movs	r2, #18
 8003518:	200c      	movs	r0, #12
 800351a:	f7ff fe9f 	bl	800325c <MFRC522_ToCard>
 800351e:	4603      	mov	r3, r0
 8003520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((status != MI_OK))// || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
 8003524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <MFRC522_Write+0xca>
    {
      status = MI_ERR;
 800352c:	2302      	movs	r3, #2
 800352e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  return status;
 8003532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003536:	4618      	mov	r0, r3
 8003538:	3728      	adds	r7, #40	; 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <CalulateCRC>:
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(u_char *pIndata, u_char len, u_char *pOutData)
{
 800353e:	b590      	push	{r4, r7, lr}
 8003540:	b087      	sub	sp, #28
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	460b      	mov	r3, r1
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	72fb      	strb	r3, [r7, #11]
  u_char i, n;

  ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 800354c:	2104      	movs	r1, #4
 800354e:	2005      	movs	r0, #5
 8003550:	f7ff fe0f 	bl	8003172 <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	200a      	movs	r0, #10
 8003558:	f7ff fdf0 	bl	800313c <SetBitMask>
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i=0; i<len; i++)
 800355c:	2300      	movs	r3, #0
 800355e:	75fb      	strb	r3, [r7, #23]
 8003560:	e00a      	b.n	8003578 <CalulateCRC+0x3a>
  {
    Write_MFRC522(FIFODataReg, *(pIndata+i));
 8003562:	7dfb      	ldrb	r3, [r7, #23]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4413      	add	r3, r2
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	4619      	mov	r1, r3
 800356c:	2009      	movs	r0, #9
 800356e:	f7ff fd7d 	bl	800306c <Write_MFRC522>
  for (i=0; i<len; i++)
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	3301      	adds	r3, #1
 8003576:	75fb      	strb	r3, [r7, #23]
 8003578:	7dfa      	ldrb	r2, [r7, #23]
 800357a:	7afb      	ldrb	r3, [r7, #11]
 800357c:	429a      	cmp	r2, r3
 800357e:	d3f0      	bcc.n	8003562 <CalulateCRC+0x24>
  }
  Write_MFRC522(CommandReg, PCD_CALCCRC);
 8003580:	2103      	movs	r1, #3
 8003582:	2001      	movs	r0, #1
 8003584:	f7ff fd72 	bl	800306c <Write_MFRC522>

  //Wait CRC calculation is complete
  i = 0xFF;
 8003588:	23ff      	movs	r3, #255	; 0xff
 800358a:	75fb      	strb	r3, [r7, #23]
  do
  {
    n = Read_MFRC522(DivIrqReg);
 800358c:	2005      	movs	r0, #5
 800358e:	f7ff fd9f 	bl	80030d0 <Read_MFRC522>
 8003592:	4603      	mov	r3, r0
 8003594:	75bb      	strb	r3, [r7, #22]
    i--;
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	3b01      	subs	r3, #1
 800359a:	75fb      	strb	r3, [r7, #23]
  }
  while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d004      	beq.n	80035ac <CalulateCRC+0x6e>
 80035a2:	7dbb      	ldrb	r3, [r7, #22]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0ef      	beq.n	800358c <CalulateCRC+0x4e>

  //Read CRC calculation result
  pOutData[0] = Read_MFRC522(CRCResultRegL);
 80035ac:	2022      	movs	r0, #34	; 0x22
 80035ae:	f7ff fd8f 	bl	80030d0 <Read_MFRC522>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461a      	mov	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	701a      	strb	r2, [r3, #0]
  pOutData[1] = Read_MFRC522(CRCResultRegM);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	1c5c      	adds	r4, r3, #1
 80035be:	2021      	movs	r0, #33	; 0x21
 80035c0:	f7ff fd86 	bl	80030d0 <Read_MFRC522>
 80035c4:	4603      	mov	r3, r0
 80035c6:	7023      	strb	r3, [r4, #0]
}
 80035c8:	bf00      	nop
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd90      	pop	{r4, r7, pc}

080035d0 <MFRC522_Auth>:
             Sectorkey--Sector password
             serNum--Card serial number, 4-byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Auth(u_char authMode, u_char BlockAddr, u_char *Sectorkey, u_char *serNum)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08c      	sub	sp, #48	; 0x30
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60ba      	str	r2, [r7, #8]
 80035d8:	607b      	str	r3, [r7, #4]
 80035da:	4603      	mov	r3, r0
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	460b      	mov	r3, r1
 80035e0:	73bb      	strb	r3, [r7, #14]
  uint recvBits;
  u_char i;
  u_char buff[12];

  //Verify the command block address + sector + password + card serial number
  buff[0] = authMode;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	753b      	strb	r3, [r7, #20]
  buff[1] = BlockAddr;
 80035e6:	7bbb      	ldrb	r3, [r7, #14]
 80035e8:	757b      	strb	r3, [r7, #21]
  for (i=0; i<6; i++)
 80035ea:	2300      	movs	r3, #0
 80035ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80035f0:	e010      	b.n	8003614 <MFRC522_Auth+0x44>
  {
    buff[i+2] = *(Sectorkey+i);
 80035f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	441a      	add	r2, r3
 80035fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035fe:	3302      	adds	r3, #2
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	3328      	adds	r3, #40	; 0x28
 8003604:	443b      	add	r3, r7
 8003606:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (i=0; i<6; i++)
 800360a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800360e:	3301      	adds	r3, #1
 8003610:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003618:	2b05      	cmp	r3, #5
 800361a:	d9ea      	bls.n	80035f2 <MFRC522_Auth+0x22>
  }
  for (i=0; i<4; i++)
 800361c:	2300      	movs	r3, #0
 800361e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003622:	e010      	b.n	8003646 <MFRC522_Auth+0x76>
  {
    buff[i+8] = *(serNum+i);
 8003624:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	441a      	add	r2, r3
 800362c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003630:	3308      	adds	r3, #8
 8003632:	7812      	ldrb	r2, [r2, #0]
 8003634:	3328      	adds	r3, #40	; 0x28
 8003636:	443b      	add	r3, r7
 8003638:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (i=0; i<4; i++)
 800363c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003640:	3301      	adds	r3, #1
 8003642:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003646:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800364a:	2b03      	cmp	r3, #3
 800364c:	d9ea      	bls.n	8003624 <MFRC522_Auth+0x54>
  }
  status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 800364e:	f107 0214 	add.w	r2, r7, #20
 8003652:	f107 0114 	add.w	r1, r7, #20
 8003656:	f107 0320 	add.w	r3, r7, #32
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	220c      	movs	r2, #12
 8003660:	200e      	movs	r0, #14
 8003662:	f7ff fdfb 	bl	800325c <MFRC522_ToCard>
 8003666:	4603      	mov	r3, r0
 8003668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08)))
 800366c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003670:	2b00      	cmp	r3, #0
 8003672:	d107      	bne.n	8003684 <MFRC522_Auth+0xb4>
 8003674:	2008      	movs	r0, #8
 8003676:	f7ff fd2b 	bl	80030d0 <Read_MFRC522>
 800367a:	4603      	mov	r3, r0
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <MFRC522_Auth+0xba>
  {
    status = MI_ERR;
 8003684:	2302      	movs	r3, #2
 8003686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 800368a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800368e:	4618      	mov	r0, r3
 8003690:	3728      	adds	r7, #40	; 0x28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <MFRC522_SelectTag>:
 * Description: election card, read the card memory capacity
 * Input parameters: serNum - Incoming card serial number
 * Return value: the successful return of card capacity
 */
u_char MFRC522_SelectTag(u_char *serNum)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b08a      	sub	sp, #40	; 0x28
 800369a:	af02      	add	r7, sp, #8
 800369c:	6078      	str	r0, [r7, #4]
  uint recvBits;
  u_char buffer[9];

  //ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

  buffer[0] = PICC_SElECTTAG;
 800369e:	2393      	movs	r3, #147	; 0x93
 80036a0:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0x70;
 80036a2:	2370      	movs	r3, #112	; 0x70
 80036a4:	737b      	strb	r3, [r7, #13]
  for (i=0; i<5; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e00c      	b.n	80036c6 <MFRC522_SelectTag+0x30>
  {
    buffer[i+2] = *(serNum+i);
 80036ac:	7ffb      	ldrb	r3, [r7, #31]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	441a      	add	r2, r3
 80036b2:	7ffb      	ldrb	r3, [r7, #31]
 80036b4:	3302      	adds	r3, #2
 80036b6:	7812      	ldrb	r2, [r2, #0]
 80036b8:	3320      	adds	r3, #32
 80036ba:	443b      	add	r3, r7
 80036bc:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (i=0; i<5; i++)
 80036c0:	7ffb      	ldrb	r3, [r7, #31]
 80036c2:	3301      	adds	r3, #1
 80036c4:	77fb      	strb	r3, [r7, #31]
 80036c6:	7ffb      	ldrb	r3, [r7, #31]
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d9ef      	bls.n	80036ac <MFRC522_SelectTag+0x16>
  }
  CalulateCRC(buffer, 7, &buffer[7]);		//??
 80036cc:	f107 030c 	add.w	r3, r7, #12
 80036d0:	1dda      	adds	r2, r3, #7
 80036d2:	f107 030c 	add.w	r3, r7, #12
 80036d6:	2107      	movs	r1, #7
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff ff30 	bl	800353e <CalulateCRC>
  status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 80036de:	f107 020c 	add.w	r2, r7, #12
 80036e2:	f107 010c 	add.w	r1, r7, #12
 80036e6:	f107 0318 	add.w	r3, r7, #24
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	2209      	movs	r2, #9
 80036f0:	200c      	movs	r0, #12
 80036f2:	f7ff fdb3 	bl	800325c <MFRC522_ToCard>
 80036f6:	4603      	mov	r3, r0
 80036f8:	777b      	strb	r3, [r7, #29]

  if ((status == MI_OK) && (recvBits == 0x18))
 80036fa:	7f7b      	ldrb	r3, [r7, #29]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d105      	bne.n	800370c <MFRC522_SelectTag+0x76>
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	2b18      	cmp	r3, #24
 8003704:	d102      	bne.n	800370c <MFRC522_SelectTag+0x76>
  {
    size = buffer[0];
 8003706:	7b3b      	ldrb	r3, [r7, #12]
 8003708:	77bb      	strb	r3, [r7, #30]
 800370a:	e001      	b.n	8003710 <MFRC522_SelectTag+0x7a>
  }
  else
  {
    size = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	77bb      	strb	r3, [r7, #30]
  }

  return size;
 8003710:	7fbb      	ldrb	r3, [r7, #30]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <MFRC522_Halt>:
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b086      	sub	sp, #24
 800371e:	af02      	add	r7, sp, #8
  u_char status;
  uint unLen;
  u_char buff[4];

  buff[0] = PICC_HALT;
 8003720:	2350      	movs	r3, #80	; 0x50
 8003722:	713b      	strb	r3, [r7, #4]
  buff[1] = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	717b      	strb	r3, [r7, #5]
  CalulateCRC(buff, 2, &buff[2]);
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	1c9a      	adds	r2, r3, #2
 800372c:	1d3b      	adds	r3, r7, #4
 800372e:	2102      	movs	r1, #2
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff04 	bl	800353e <CalulateCRC>

  status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
 8003736:	1d3a      	adds	r2, r7, #4
 8003738:	1d39      	adds	r1, r7, #4
 800373a:	f107 0308 	add.w	r3, r7, #8
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	2204      	movs	r2, #4
 8003744:	200c      	movs	r0, #12
 8003746:	f7ff fd89 	bl	800325c <MFRC522_ToCard>
 800374a:	4603      	mov	r3, r0
 800374c:	73fb      	strb	r3, [r7, #15]
  //return status;
}
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <MFRC522_StopCrypto1>:
//--------------------------------------
void MFRC522_StopCrypto1(void) {
 8003756:	b580      	push	{r7, lr}
 8003758:	af00      	add	r7, sp, #0
	// Clear MFCrypto1On bit
	ClearBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
 800375a:	2108      	movs	r1, #8
 800375c:	2008      	movs	r0, #8
 800375e:	f7ff fd08 	bl	8003172 <ClearBitMask>
} // End PCD_StopCrypto1()
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <__errno>:
 8003768:	4b01      	ldr	r3, [pc, #4]	; (8003770 <__errno+0x8>)
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	2000000c 	.word	0x2000000c

08003774 <__libc_init_array>:
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	2600      	movs	r6, #0
 8003778:	4d0c      	ldr	r5, [pc, #48]	; (80037ac <__libc_init_array+0x38>)
 800377a:	4c0d      	ldr	r4, [pc, #52]	; (80037b0 <__libc_init_array+0x3c>)
 800377c:	1b64      	subs	r4, r4, r5
 800377e:	10a4      	asrs	r4, r4, #2
 8003780:	42a6      	cmp	r6, r4
 8003782:	d109      	bne.n	8003798 <__libc_init_array+0x24>
 8003784:	f000 fc9c 	bl	80040c0 <_init>
 8003788:	2600      	movs	r6, #0
 800378a:	4d0a      	ldr	r5, [pc, #40]	; (80037b4 <__libc_init_array+0x40>)
 800378c:	4c0a      	ldr	r4, [pc, #40]	; (80037b8 <__libc_init_array+0x44>)
 800378e:	1b64      	subs	r4, r4, r5
 8003790:	10a4      	asrs	r4, r4, #2
 8003792:	42a6      	cmp	r6, r4
 8003794:	d105      	bne.n	80037a2 <__libc_init_array+0x2e>
 8003796:	bd70      	pop	{r4, r5, r6, pc}
 8003798:	f855 3b04 	ldr.w	r3, [r5], #4
 800379c:	4798      	blx	r3
 800379e:	3601      	adds	r6, #1
 80037a0:	e7ee      	b.n	8003780 <__libc_init_array+0xc>
 80037a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a6:	4798      	blx	r3
 80037a8:	3601      	adds	r6, #1
 80037aa:	e7f2      	b.n	8003792 <__libc_init_array+0x1e>
 80037ac:	080041f8 	.word	0x080041f8
 80037b0:	080041f8 	.word	0x080041f8
 80037b4:	080041f8 	.word	0x080041f8
 80037b8:	080041fc 	.word	0x080041fc

080037bc <memset>:
 80037bc:	4603      	mov	r3, r0
 80037be:	4402      	add	r2, r0
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d100      	bne.n	80037c6 <memset+0xa>
 80037c4:	4770      	bx	lr
 80037c6:	f803 1b01 	strb.w	r1, [r3], #1
 80037ca:	e7f9      	b.n	80037c0 <memset+0x4>

080037cc <siprintf>:
 80037cc:	b40e      	push	{r1, r2, r3}
 80037ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037d2:	b500      	push	{lr}
 80037d4:	b09c      	sub	sp, #112	; 0x70
 80037d6:	ab1d      	add	r3, sp, #116	; 0x74
 80037d8:	9002      	str	r0, [sp, #8]
 80037da:	9006      	str	r0, [sp, #24]
 80037dc:	9107      	str	r1, [sp, #28]
 80037de:	9104      	str	r1, [sp, #16]
 80037e0:	4808      	ldr	r0, [pc, #32]	; (8003804 <siprintf+0x38>)
 80037e2:	4909      	ldr	r1, [pc, #36]	; (8003808 <siprintf+0x3c>)
 80037e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80037e8:	9105      	str	r1, [sp, #20]
 80037ea:	6800      	ldr	r0, [r0, #0]
 80037ec:	a902      	add	r1, sp, #8
 80037ee:	9301      	str	r3, [sp, #4]
 80037f0:	f000 f868 	bl	80038c4 <_svfiprintf_r>
 80037f4:	2200      	movs	r2, #0
 80037f6:	9b02      	ldr	r3, [sp, #8]
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	b01c      	add	sp, #112	; 0x70
 80037fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003800:	b003      	add	sp, #12
 8003802:	4770      	bx	lr
 8003804:	2000000c 	.word	0x2000000c
 8003808:	ffff0208 	.word	0xffff0208

0800380c <__ssputs_r>:
 800380c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003810:	688e      	ldr	r6, [r1, #8]
 8003812:	4682      	mov	sl, r0
 8003814:	429e      	cmp	r6, r3
 8003816:	460c      	mov	r4, r1
 8003818:	4690      	mov	r8, r2
 800381a:	461f      	mov	r7, r3
 800381c:	d838      	bhi.n	8003890 <__ssputs_r+0x84>
 800381e:	898a      	ldrh	r2, [r1, #12]
 8003820:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003824:	d032      	beq.n	800388c <__ssputs_r+0x80>
 8003826:	6825      	ldr	r5, [r4, #0]
 8003828:	6909      	ldr	r1, [r1, #16]
 800382a:	3301      	adds	r3, #1
 800382c:	eba5 0901 	sub.w	r9, r5, r1
 8003830:	6965      	ldr	r5, [r4, #20]
 8003832:	444b      	add	r3, r9
 8003834:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800383c:	106d      	asrs	r5, r5, #1
 800383e:	429d      	cmp	r5, r3
 8003840:	bf38      	it	cc
 8003842:	461d      	movcc	r5, r3
 8003844:	0553      	lsls	r3, r2, #21
 8003846:	d531      	bpl.n	80038ac <__ssputs_r+0xa0>
 8003848:	4629      	mov	r1, r5
 800384a:	f000 fb6f 	bl	8003f2c <_malloc_r>
 800384e:	4606      	mov	r6, r0
 8003850:	b950      	cbnz	r0, 8003868 <__ssputs_r+0x5c>
 8003852:	230c      	movs	r3, #12
 8003854:	f04f 30ff 	mov.w	r0, #4294967295
 8003858:	f8ca 3000 	str.w	r3, [sl]
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003862:	81a3      	strh	r3, [r4, #12]
 8003864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003868:	464a      	mov	r2, r9
 800386a:	6921      	ldr	r1, [r4, #16]
 800386c:	f000 face 	bl	8003e0c <memcpy>
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387a:	81a3      	strh	r3, [r4, #12]
 800387c:	6126      	str	r6, [r4, #16]
 800387e:	444e      	add	r6, r9
 8003880:	6026      	str	r6, [r4, #0]
 8003882:	463e      	mov	r6, r7
 8003884:	6165      	str	r5, [r4, #20]
 8003886:	eba5 0509 	sub.w	r5, r5, r9
 800388a:	60a5      	str	r5, [r4, #8]
 800388c:	42be      	cmp	r6, r7
 800388e:	d900      	bls.n	8003892 <__ssputs_r+0x86>
 8003890:	463e      	mov	r6, r7
 8003892:	4632      	mov	r2, r6
 8003894:	4641      	mov	r1, r8
 8003896:	6820      	ldr	r0, [r4, #0]
 8003898:	f000 fac6 	bl	8003e28 <memmove>
 800389c:	68a3      	ldr	r3, [r4, #8]
 800389e:	2000      	movs	r0, #0
 80038a0:	1b9b      	subs	r3, r3, r6
 80038a2:	60a3      	str	r3, [r4, #8]
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	4433      	add	r3, r6
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	e7db      	b.n	8003864 <__ssputs_r+0x58>
 80038ac:	462a      	mov	r2, r5
 80038ae:	f000 fbb1 	bl	8004014 <_realloc_r>
 80038b2:	4606      	mov	r6, r0
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d1e1      	bne.n	800387c <__ssputs_r+0x70>
 80038b8:	4650      	mov	r0, sl
 80038ba:	6921      	ldr	r1, [r4, #16]
 80038bc:	f000 face 	bl	8003e5c <_free_r>
 80038c0:	e7c7      	b.n	8003852 <__ssputs_r+0x46>
	...

080038c4 <_svfiprintf_r>:
 80038c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c8:	4698      	mov	r8, r3
 80038ca:	898b      	ldrh	r3, [r1, #12]
 80038cc:	4607      	mov	r7, r0
 80038ce:	061b      	lsls	r3, r3, #24
 80038d0:	460d      	mov	r5, r1
 80038d2:	4614      	mov	r4, r2
 80038d4:	b09d      	sub	sp, #116	; 0x74
 80038d6:	d50e      	bpl.n	80038f6 <_svfiprintf_r+0x32>
 80038d8:	690b      	ldr	r3, [r1, #16]
 80038da:	b963      	cbnz	r3, 80038f6 <_svfiprintf_r+0x32>
 80038dc:	2140      	movs	r1, #64	; 0x40
 80038de:	f000 fb25 	bl	8003f2c <_malloc_r>
 80038e2:	6028      	str	r0, [r5, #0]
 80038e4:	6128      	str	r0, [r5, #16]
 80038e6:	b920      	cbnz	r0, 80038f2 <_svfiprintf_r+0x2e>
 80038e8:	230c      	movs	r3, #12
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	e0d1      	b.n	8003a96 <_svfiprintf_r+0x1d2>
 80038f2:	2340      	movs	r3, #64	; 0x40
 80038f4:	616b      	str	r3, [r5, #20]
 80038f6:	2300      	movs	r3, #0
 80038f8:	9309      	str	r3, [sp, #36]	; 0x24
 80038fa:	2320      	movs	r3, #32
 80038fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003900:	2330      	movs	r3, #48	; 0x30
 8003902:	f04f 0901 	mov.w	r9, #1
 8003906:	f8cd 800c 	str.w	r8, [sp, #12]
 800390a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ab0 <_svfiprintf_r+0x1ec>
 800390e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003912:	4623      	mov	r3, r4
 8003914:	469a      	mov	sl, r3
 8003916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800391a:	b10a      	cbz	r2, 8003920 <_svfiprintf_r+0x5c>
 800391c:	2a25      	cmp	r2, #37	; 0x25
 800391e:	d1f9      	bne.n	8003914 <_svfiprintf_r+0x50>
 8003920:	ebba 0b04 	subs.w	fp, sl, r4
 8003924:	d00b      	beq.n	800393e <_svfiprintf_r+0x7a>
 8003926:	465b      	mov	r3, fp
 8003928:	4622      	mov	r2, r4
 800392a:	4629      	mov	r1, r5
 800392c:	4638      	mov	r0, r7
 800392e:	f7ff ff6d 	bl	800380c <__ssputs_r>
 8003932:	3001      	adds	r0, #1
 8003934:	f000 80aa 	beq.w	8003a8c <_svfiprintf_r+0x1c8>
 8003938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800393a:	445a      	add	r2, fp
 800393c:	9209      	str	r2, [sp, #36]	; 0x24
 800393e:	f89a 3000 	ldrb.w	r3, [sl]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 80a2 	beq.w	8003a8c <_svfiprintf_r+0x1c8>
 8003948:	2300      	movs	r3, #0
 800394a:	f04f 32ff 	mov.w	r2, #4294967295
 800394e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003952:	f10a 0a01 	add.w	sl, sl, #1
 8003956:	9304      	str	r3, [sp, #16]
 8003958:	9307      	str	r3, [sp, #28]
 800395a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800395e:	931a      	str	r3, [sp, #104]	; 0x68
 8003960:	4654      	mov	r4, sl
 8003962:	2205      	movs	r2, #5
 8003964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003968:	4851      	ldr	r0, [pc, #324]	; (8003ab0 <_svfiprintf_r+0x1ec>)
 800396a:	f000 fa41 	bl	8003df0 <memchr>
 800396e:	9a04      	ldr	r2, [sp, #16]
 8003970:	b9d8      	cbnz	r0, 80039aa <_svfiprintf_r+0xe6>
 8003972:	06d0      	lsls	r0, r2, #27
 8003974:	bf44      	itt	mi
 8003976:	2320      	movmi	r3, #32
 8003978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800397c:	0711      	lsls	r1, r2, #28
 800397e:	bf44      	itt	mi
 8003980:	232b      	movmi	r3, #43	; 0x2b
 8003982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003986:	f89a 3000 	ldrb.w	r3, [sl]
 800398a:	2b2a      	cmp	r3, #42	; 0x2a
 800398c:	d015      	beq.n	80039ba <_svfiprintf_r+0xf6>
 800398e:	4654      	mov	r4, sl
 8003990:	2000      	movs	r0, #0
 8003992:	f04f 0c0a 	mov.w	ip, #10
 8003996:	9a07      	ldr	r2, [sp, #28]
 8003998:	4621      	mov	r1, r4
 800399a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800399e:	3b30      	subs	r3, #48	; 0x30
 80039a0:	2b09      	cmp	r3, #9
 80039a2:	d94e      	bls.n	8003a42 <_svfiprintf_r+0x17e>
 80039a4:	b1b0      	cbz	r0, 80039d4 <_svfiprintf_r+0x110>
 80039a6:	9207      	str	r2, [sp, #28]
 80039a8:	e014      	b.n	80039d4 <_svfiprintf_r+0x110>
 80039aa:	eba0 0308 	sub.w	r3, r0, r8
 80039ae:	fa09 f303 	lsl.w	r3, r9, r3
 80039b2:	4313      	orrs	r3, r2
 80039b4:	46a2      	mov	sl, r4
 80039b6:	9304      	str	r3, [sp, #16]
 80039b8:	e7d2      	b.n	8003960 <_svfiprintf_r+0x9c>
 80039ba:	9b03      	ldr	r3, [sp, #12]
 80039bc:	1d19      	adds	r1, r3, #4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	9103      	str	r1, [sp, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bfbb      	ittet	lt
 80039c6:	425b      	neglt	r3, r3
 80039c8:	f042 0202 	orrlt.w	r2, r2, #2
 80039cc:	9307      	strge	r3, [sp, #28]
 80039ce:	9307      	strlt	r3, [sp, #28]
 80039d0:	bfb8      	it	lt
 80039d2:	9204      	strlt	r2, [sp, #16]
 80039d4:	7823      	ldrb	r3, [r4, #0]
 80039d6:	2b2e      	cmp	r3, #46	; 0x2e
 80039d8:	d10c      	bne.n	80039f4 <_svfiprintf_r+0x130>
 80039da:	7863      	ldrb	r3, [r4, #1]
 80039dc:	2b2a      	cmp	r3, #42	; 0x2a
 80039de:	d135      	bne.n	8003a4c <_svfiprintf_r+0x188>
 80039e0:	9b03      	ldr	r3, [sp, #12]
 80039e2:	3402      	adds	r4, #2
 80039e4:	1d1a      	adds	r2, r3, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	9203      	str	r2, [sp, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bfb8      	it	lt
 80039ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80039f2:	9305      	str	r3, [sp, #20]
 80039f4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003ab4 <_svfiprintf_r+0x1f0>
 80039f8:	2203      	movs	r2, #3
 80039fa:	4650      	mov	r0, sl
 80039fc:	7821      	ldrb	r1, [r4, #0]
 80039fe:	f000 f9f7 	bl	8003df0 <memchr>
 8003a02:	b140      	cbz	r0, 8003a16 <_svfiprintf_r+0x152>
 8003a04:	2340      	movs	r3, #64	; 0x40
 8003a06:	eba0 000a 	sub.w	r0, r0, sl
 8003a0a:	fa03 f000 	lsl.w	r0, r3, r0
 8003a0e:	9b04      	ldr	r3, [sp, #16]
 8003a10:	3401      	adds	r4, #1
 8003a12:	4303      	orrs	r3, r0
 8003a14:	9304      	str	r3, [sp, #16]
 8003a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a1a:	2206      	movs	r2, #6
 8003a1c:	4826      	ldr	r0, [pc, #152]	; (8003ab8 <_svfiprintf_r+0x1f4>)
 8003a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a22:	f000 f9e5 	bl	8003df0 <memchr>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d038      	beq.n	8003a9c <_svfiprintf_r+0x1d8>
 8003a2a:	4b24      	ldr	r3, [pc, #144]	; (8003abc <_svfiprintf_r+0x1f8>)
 8003a2c:	bb1b      	cbnz	r3, 8003a76 <_svfiprintf_r+0x1b2>
 8003a2e:	9b03      	ldr	r3, [sp, #12]
 8003a30:	3307      	adds	r3, #7
 8003a32:	f023 0307 	bic.w	r3, r3, #7
 8003a36:	3308      	adds	r3, #8
 8003a38:	9303      	str	r3, [sp, #12]
 8003a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a3c:	4433      	add	r3, r6
 8003a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a40:	e767      	b.n	8003912 <_svfiprintf_r+0x4e>
 8003a42:	460c      	mov	r4, r1
 8003a44:	2001      	movs	r0, #1
 8003a46:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a4a:	e7a5      	b.n	8003998 <_svfiprintf_r+0xd4>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f04f 0c0a 	mov.w	ip, #10
 8003a52:	4619      	mov	r1, r3
 8003a54:	3401      	adds	r4, #1
 8003a56:	9305      	str	r3, [sp, #20]
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a5e:	3a30      	subs	r2, #48	; 0x30
 8003a60:	2a09      	cmp	r2, #9
 8003a62:	d903      	bls.n	8003a6c <_svfiprintf_r+0x1a8>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0c5      	beq.n	80039f4 <_svfiprintf_r+0x130>
 8003a68:	9105      	str	r1, [sp, #20]
 8003a6a:	e7c3      	b.n	80039f4 <_svfiprintf_r+0x130>
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	2301      	movs	r3, #1
 8003a70:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a74:	e7f0      	b.n	8003a58 <_svfiprintf_r+0x194>
 8003a76:	ab03      	add	r3, sp, #12
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	462a      	mov	r2, r5
 8003a7c:	4638      	mov	r0, r7
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <_svfiprintf_r+0x1fc>)
 8003a80:	a904      	add	r1, sp, #16
 8003a82:	f3af 8000 	nop.w
 8003a86:	1c42      	adds	r2, r0, #1
 8003a88:	4606      	mov	r6, r0
 8003a8a:	d1d6      	bne.n	8003a3a <_svfiprintf_r+0x176>
 8003a8c:	89ab      	ldrh	r3, [r5, #12]
 8003a8e:	065b      	lsls	r3, r3, #25
 8003a90:	f53f af2c 	bmi.w	80038ec <_svfiprintf_r+0x28>
 8003a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a96:	b01d      	add	sp, #116	; 0x74
 8003a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a9c:	ab03      	add	r3, sp, #12
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	462a      	mov	r2, r5
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <_svfiprintf_r+0x1fc>)
 8003aa6:	a904      	add	r1, sp, #16
 8003aa8:	f000 f87c 	bl	8003ba4 <_printf_i>
 8003aac:	e7eb      	b.n	8003a86 <_svfiprintf_r+0x1c2>
 8003aae:	bf00      	nop
 8003ab0:	080041c4 	.word	0x080041c4
 8003ab4:	080041ca 	.word	0x080041ca
 8003ab8:	080041ce 	.word	0x080041ce
 8003abc:	00000000 	.word	0x00000000
 8003ac0:	0800380d 	.word	0x0800380d

08003ac4 <_printf_common>:
 8003ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac8:	4616      	mov	r6, r2
 8003aca:	4699      	mov	r9, r3
 8003acc:	688a      	ldr	r2, [r1, #8]
 8003ace:	690b      	ldr	r3, [r1, #16]
 8003ad0:	4607      	mov	r7, r0
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	bfb8      	it	lt
 8003ad6:	4613      	movlt	r3, r2
 8003ad8:	6033      	str	r3, [r6, #0]
 8003ada:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ade:	460c      	mov	r4, r1
 8003ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ae4:	b10a      	cbz	r2, 8003aea <_printf_common+0x26>
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	6033      	str	r3, [r6, #0]
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	0699      	lsls	r1, r3, #26
 8003aee:	bf42      	ittt	mi
 8003af0:	6833      	ldrmi	r3, [r6, #0]
 8003af2:	3302      	addmi	r3, #2
 8003af4:	6033      	strmi	r3, [r6, #0]
 8003af6:	6825      	ldr	r5, [r4, #0]
 8003af8:	f015 0506 	ands.w	r5, r5, #6
 8003afc:	d106      	bne.n	8003b0c <_printf_common+0x48>
 8003afe:	f104 0a19 	add.w	sl, r4, #25
 8003b02:	68e3      	ldr	r3, [r4, #12]
 8003b04:	6832      	ldr	r2, [r6, #0]
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	42ab      	cmp	r3, r5
 8003b0a:	dc28      	bgt.n	8003b5e <_printf_common+0x9a>
 8003b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b10:	1e13      	subs	r3, r2, #0
 8003b12:	6822      	ldr	r2, [r4, #0]
 8003b14:	bf18      	it	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	0692      	lsls	r2, r2, #26
 8003b1a:	d42d      	bmi.n	8003b78 <_printf_common+0xb4>
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	4638      	mov	r0, r7
 8003b20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b24:	47c0      	blx	r8
 8003b26:	3001      	adds	r0, #1
 8003b28:	d020      	beq.n	8003b6c <_printf_common+0xa8>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	68e5      	ldr	r5, [r4, #12]
 8003b2e:	f003 0306 	and.w	r3, r3, #6
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	bf18      	it	ne
 8003b36:	2500      	movne	r5, #0
 8003b38:	6832      	ldr	r2, [r6, #0]
 8003b3a:	f04f 0600 	mov.w	r6, #0
 8003b3e:	68a3      	ldr	r3, [r4, #8]
 8003b40:	bf08      	it	eq
 8003b42:	1aad      	subeq	r5, r5, r2
 8003b44:	6922      	ldr	r2, [r4, #16]
 8003b46:	bf08      	it	eq
 8003b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bfc4      	itt	gt
 8003b50:	1a9b      	subgt	r3, r3, r2
 8003b52:	18ed      	addgt	r5, r5, r3
 8003b54:	341a      	adds	r4, #26
 8003b56:	42b5      	cmp	r5, r6
 8003b58:	d11a      	bne.n	8003b90 <_printf_common+0xcc>
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	e008      	b.n	8003b70 <_printf_common+0xac>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	4652      	mov	r2, sl
 8003b62:	4649      	mov	r1, r9
 8003b64:	4638      	mov	r0, r7
 8003b66:	47c0      	blx	r8
 8003b68:	3001      	adds	r0, #1
 8003b6a:	d103      	bne.n	8003b74 <_printf_common+0xb0>
 8003b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b74:	3501      	adds	r5, #1
 8003b76:	e7c4      	b.n	8003b02 <_printf_common+0x3e>
 8003b78:	2030      	movs	r0, #48	; 0x30
 8003b7a:	18e1      	adds	r1, r4, r3
 8003b7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b86:	4422      	add	r2, r4
 8003b88:	3302      	adds	r3, #2
 8003b8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b8e:	e7c5      	b.n	8003b1c <_printf_common+0x58>
 8003b90:	2301      	movs	r3, #1
 8003b92:	4622      	mov	r2, r4
 8003b94:	4649      	mov	r1, r9
 8003b96:	4638      	mov	r0, r7
 8003b98:	47c0      	blx	r8
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	d0e6      	beq.n	8003b6c <_printf_common+0xa8>
 8003b9e:	3601      	adds	r6, #1
 8003ba0:	e7d9      	b.n	8003b56 <_printf_common+0x92>
	...

08003ba4 <_printf_i>:
 8003ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba8:	7e0f      	ldrb	r7, [r1, #24]
 8003baa:	4691      	mov	r9, r2
 8003bac:	2f78      	cmp	r7, #120	; 0x78
 8003bae:	4680      	mov	r8, r0
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	469a      	mov	sl, r3
 8003bb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bba:	d807      	bhi.n	8003bcc <_printf_i+0x28>
 8003bbc:	2f62      	cmp	r7, #98	; 0x62
 8003bbe:	d80a      	bhi.n	8003bd6 <_printf_i+0x32>
 8003bc0:	2f00      	cmp	r7, #0
 8003bc2:	f000 80d9 	beq.w	8003d78 <_printf_i+0x1d4>
 8003bc6:	2f58      	cmp	r7, #88	; 0x58
 8003bc8:	f000 80a4 	beq.w	8003d14 <_printf_i+0x170>
 8003bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bd4:	e03a      	b.n	8003c4c <_printf_i+0xa8>
 8003bd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bda:	2b15      	cmp	r3, #21
 8003bdc:	d8f6      	bhi.n	8003bcc <_printf_i+0x28>
 8003bde:	a101      	add	r1, pc, #4	; (adr r1, 8003be4 <_printf_i+0x40>)
 8003be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003be4:	08003c3d 	.word	0x08003c3d
 8003be8:	08003c51 	.word	0x08003c51
 8003bec:	08003bcd 	.word	0x08003bcd
 8003bf0:	08003bcd 	.word	0x08003bcd
 8003bf4:	08003bcd 	.word	0x08003bcd
 8003bf8:	08003bcd 	.word	0x08003bcd
 8003bfc:	08003c51 	.word	0x08003c51
 8003c00:	08003bcd 	.word	0x08003bcd
 8003c04:	08003bcd 	.word	0x08003bcd
 8003c08:	08003bcd 	.word	0x08003bcd
 8003c0c:	08003bcd 	.word	0x08003bcd
 8003c10:	08003d5f 	.word	0x08003d5f
 8003c14:	08003c81 	.word	0x08003c81
 8003c18:	08003d41 	.word	0x08003d41
 8003c1c:	08003bcd 	.word	0x08003bcd
 8003c20:	08003bcd 	.word	0x08003bcd
 8003c24:	08003d81 	.word	0x08003d81
 8003c28:	08003bcd 	.word	0x08003bcd
 8003c2c:	08003c81 	.word	0x08003c81
 8003c30:	08003bcd 	.word	0x08003bcd
 8003c34:	08003bcd 	.word	0x08003bcd
 8003c38:	08003d49 	.word	0x08003d49
 8003c3c:	682b      	ldr	r3, [r5, #0]
 8003c3e:	1d1a      	adds	r2, r3, #4
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	602a      	str	r2, [r5, #0]
 8003c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0a4      	b.n	8003d9a <_printf_i+0x1f6>
 8003c50:	6820      	ldr	r0, [r4, #0]
 8003c52:	6829      	ldr	r1, [r5, #0]
 8003c54:	0606      	lsls	r6, r0, #24
 8003c56:	f101 0304 	add.w	r3, r1, #4
 8003c5a:	d50a      	bpl.n	8003c72 <_printf_i+0xce>
 8003c5c:	680e      	ldr	r6, [r1, #0]
 8003c5e:	602b      	str	r3, [r5, #0]
 8003c60:	2e00      	cmp	r6, #0
 8003c62:	da03      	bge.n	8003c6c <_printf_i+0xc8>
 8003c64:	232d      	movs	r3, #45	; 0x2d
 8003c66:	4276      	negs	r6, r6
 8003c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c6c:	230a      	movs	r3, #10
 8003c6e:	485e      	ldr	r0, [pc, #376]	; (8003de8 <_printf_i+0x244>)
 8003c70:	e019      	b.n	8003ca6 <_printf_i+0x102>
 8003c72:	680e      	ldr	r6, [r1, #0]
 8003c74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c78:	602b      	str	r3, [r5, #0]
 8003c7a:	bf18      	it	ne
 8003c7c:	b236      	sxthne	r6, r6
 8003c7e:	e7ef      	b.n	8003c60 <_printf_i+0xbc>
 8003c80:	682b      	ldr	r3, [r5, #0]
 8003c82:	6820      	ldr	r0, [r4, #0]
 8003c84:	1d19      	adds	r1, r3, #4
 8003c86:	6029      	str	r1, [r5, #0]
 8003c88:	0601      	lsls	r1, r0, #24
 8003c8a:	d501      	bpl.n	8003c90 <_printf_i+0xec>
 8003c8c:	681e      	ldr	r6, [r3, #0]
 8003c8e:	e002      	b.n	8003c96 <_printf_i+0xf2>
 8003c90:	0646      	lsls	r6, r0, #25
 8003c92:	d5fb      	bpl.n	8003c8c <_printf_i+0xe8>
 8003c94:	881e      	ldrh	r6, [r3, #0]
 8003c96:	2f6f      	cmp	r7, #111	; 0x6f
 8003c98:	bf0c      	ite	eq
 8003c9a:	2308      	moveq	r3, #8
 8003c9c:	230a      	movne	r3, #10
 8003c9e:	4852      	ldr	r0, [pc, #328]	; (8003de8 <_printf_i+0x244>)
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ca6:	6865      	ldr	r5, [r4, #4]
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	bfa8      	it	ge
 8003cac:	6821      	ldrge	r1, [r4, #0]
 8003cae:	60a5      	str	r5, [r4, #8]
 8003cb0:	bfa4      	itt	ge
 8003cb2:	f021 0104 	bicge.w	r1, r1, #4
 8003cb6:	6021      	strge	r1, [r4, #0]
 8003cb8:	b90e      	cbnz	r6, 8003cbe <_printf_i+0x11a>
 8003cba:	2d00      	cmp	r5, #0
 8003cbc:	d04d      	beq.n	8003d5a <_printf_i+0x1b6>
 8003cbe:	4615      	mov	r5, r2
 8003cc0:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cc4:	fb03 6711 	mls	r7, r3, r1, r6
 8003cc8:	5dc7      	ldrb	r7, [r0, r7]
 8003cca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cce:	4637      	mov	r7, r6
 8003cd0:	42bb      	cmp	r3, r7
 8003cd2:	460e      	mov	r6, r1
 8003cd4:	d9f4      	bls.n	8003cc0 <_printf_i+0x11c>
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d10b      	bne.n	8003cf2 <_printf_i+0x14e>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	07de      	lsls	r6, r3, #31
 8003cde:	d508      	bpl.n	8003cf2 <_printf_i+0x14e>
 8003ce0:	6923      	ldr	r3, [r4, #16]
 8003ce2:	6861      	ldr	r1, [r4, #4]
 8003ce4:	4299      	cmp	r1, r3
 8003ce6:	bfde      	ittt	le
 8003ce8:	2330      	movle	r3, #48	; 0x30
 8003cea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cf2:	1b52      	subs	r2, r2, r5
 8003cf4:	6122      	str	r2, [r4, #16]
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	4640      	mov	r0, r8
 8003cfc:	f8cd a000 	str.w	sl, [sp]
 8003d00:	aa03      	add	r2, sp, #12
 8003d02:	f7ff fedf 	bl	8003ac4 <_printf_common>
 8003d06:	3001      	adds	r0, #1
 8003d08:	d14c      	bne.n	8003da4 <_printf_i+0x200>
 8003d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0e:	b004      	add	sp, #16
 8003d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d14:	4834      	ldr	r0, [pc, #208]	; (8003de8 <_printf_i+0x244>)
 8003d16:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d1a:	6829      	ldr	r1, [r5, #0]
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d22:	6029      	str	r1, [r5, #0]
 8003d24:	061d      	lsls	r5, r3, #24
 8003d26:	d514      	bpl.n	8003d52 <_printf_i+0x1ae>
 8003d28:	07df      	lsls	r7, r3, #31
 8003d2a:	bf44      	itt	mi
 8003d2c:	f043 0320 	orrmi.w	r3, r3, #32
 8003d30:	6023      	strmi	r3, [r4, #0]
 8003d32:	b91e      	cbnz	r6, 8003d3c <_printf_i+0x198>
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	f023 0320 	bic.w	r3, r3, #32
 8003d3a:	6023      	str	r3, [r4, #0]
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	e7af      	b.n	8003ca0 <_printf_i+0xfc>
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	f043 0320 	orr.w	r3, r3, #32
 8003d46:	6023      	str	r3, [r4, #0]
 8003d48:	2378      	movs	r3, #120	; 0x78
 8003d4a:	4828      	ldr	r0, [pc, #160]	; (8003dec <_printf_i+0x248>)
 8003d4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d50:	e7e3      	b.n	8003d1a <_printf_i+0x176>
 8003d52:	0659      	lsls	r1, r3, #25
 8003d54:	bf48      	it	mi
 8003d56:	b2b6      	uxthmi	r6, r6
 8003d58:	e7e6      	b.n	8003d28 <_printf_i+0x184>
 8003d5a:	4615      	mov	r5, r2
 8003d5c:	e7bb      	b.n	8003cd6 <_printf_i+0x132>
 8003d5e:	682b      	ldr	r3, [r5, #0]
 8003d60:	6826      	ldr	r6, [r4, #0]
 8003d62:	1d18      	adds	r0, r3, #4
 8003d64:	6961      	ldr	r1, [r4, #20]
 8003d66:	6028      	str	r0, [r5, #0]
 8003d68:	0635      	lsls	r5, r6, #24
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	d501      	bpl.n	8003d72 <_printf_i+0x1ce>
 8003d6e:	6019      	str	r1, [r3, #0]
 8003d70:	e002      	b.n	8003d78 <_printf_i+0x1d4>
 8003d72:	0670      	lsls	r0, r6, #25
 8003d74:	d5fb      	bpl.n	8003d6e <_printf_i+0x1ca>
 8003d76:	8019      	strh	r1, [r3, #0]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	4615      	mov	r5, r2
 8003d7c:	6123      	str	r3, [r4, #16]
 8003d7e:	e7ba      	b.n	8003cf6 <_printf_i+0x152>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	2100      	movs	r1, #0
 8003d84:	1d1a      	adds	r2, r3, #4
 8003d86:	602a      	str	r2, [r5, #0]
 8003d88:	681d      	ldr	r5, [r3, #0]
 8003d8a:	6862      	ldr	r2, [r4, #4]
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f000 f82f 	bl	8003df0 <memchr>
 8003d92:	b108      	cbz	r0, 8003d98 <_printf_i+0x1f4>
 8003d94:	1b40      	subs	r0, r0, r5
 8003d96:	6060      	str	r0, [r4, #4]
 8003d98:	6863      	ldr	r3, [r4, #4]
 8003d9a:	6123      	str	r3, [r4, #16]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003da2:	e7a8      	b.n	8003cf6 <_printf_i+0x152>
 8003da4:	462a      	mov	r2, r5
 8003da6:	4649      	mov	r1, r9
 8003da8:	4640      	mov	r0, r8
 8003daa:	6923      	ldr	r3, [r4, #16]
 8003dac:	47d0      	blx	sl
 8003dae:	3001      	adds	r0, #1
 8003db0:	d0ab      	beq.n	8003d0a <_printf_i+0x166>
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	079b      	lsls	r3, r3, #30
 8003db6:	d413      	bmi.n	8003de0 <_printf_i+0x23c>
 8003db8:	68e0      	ldr	r0, [r4, #12]
 8003dba:	9b03      	ldr	r3, [sp, #12]
 8003dbc:	4298      	cmp	r0, r3
 8003dbe:	bfb8      	it	lt
 8003dc0:	4618      	movlt	r0, r3
 8003dc2:	e7a4      	b.n	8003d0e <_printf_i+0x16a>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	4632      	mov	r2, r6
 8003dc8:	4649      	mov	r1, r9
 8003dca:	4640      	mov	r0, r8
 8003dcc:	47d0      	blx	sl
 8003dce:	3001      	adds	r0, #1
 8003dd0:	d09b      	beq.n	8003d0a <_printf_i+0x166>
 8003dd2:	3501      	adds	r5, #1
 8003dd4:	68e3      	ldr	r3, [r4, #12]
 8003dd6:	9903      	ldr	r1, [sp, #12]
 8003dd8:	1a5b      	subs	r3, r3, r1
 8003dda:	42ab      	cmp	r3, r5
 8003ddc:	dcf2      	bgt.n	8003dc4 <_printf_i+0x220>
 8003dde:	e7eb      	b.n	8003db8 <_printf_i+0x214>
 8003de0:	2500      	movs	r5, #0
 8003de2:	f104 0619 	add.w	r6, r4, #25
 8003de6:	e7f5      	b.n	8003dd4 <_printf_i+0x230>
 8003de8:	080041d5 	.word	0x080041d5
 8003dec:	080041e6 	.word	0x080041e6

08003df0 <memchr>:
 8003df0:	4603      	mov	r3, r0
 8003df2:	b510      	push	{r4, lr}
 8003df4:	b2c9      	uxtb	r1, r1
 8003df6:	4402      	add	r2, r0
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	d101      	bne.n	8003e02 <memchr+0x12>
 8003dfe:	2000      	movs	r0, #0
 8003e00:	e003      	b.n	8003e0a <memchr+0x1a>
 8003e02:	7804      	ldrb	r4, [r0, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	428c      	cmp	r4, r1
 8003e08:	d1f6      	bne.n	8003df8 <memchr+0x8>
 8003e0a:	bd10      	pop	{r4, pc}

08003e0c <memcpy>:
 8003e0c:	440a      	add	r2, r1
 8003e0e:	4291      	cmp	r1, r2
 8003e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e14:	d100      	bne.n	8003e18 <memcpy+0xc>
 8003e16:	4770      	bx	lr
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e1e:	4291      	cmp	r1, r2
 8003e20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e24:	d1f9      	bne.n	8003e1a <memcpy+0xe>
 8003e26:	bd10      	pop	{r4, pc}

08003e28 <memmove>:
 8003e28:	4288      	cmp	r0, r1
 8003e2a:	b510      	push	{r4, lr}
 8003e2c:	eb01 0402 	add.w	r4, r1, r2
 8003e30:	d902      	bls.n	8003e38 <memmove+0x10>
 8003e32:	4284      	cmp	r4, r0
 8003e34:	4623      	mov	r3, r4
 8003e36:	d807      	bhi.n	8003e48 <memmove+0x20>
 8003e38:	1e43      	subs	r3, r0, #1
 8003e3a:	42a1      	cmp	r1, r4
 8003e3c:	d008      	beq.n	8003e50 <memmove+0x28>
 8003e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e46:	e7f8      	b.n	8003e3a <memmove+0x12>
 8003e48:	4601      	mov	r1, r0
 8003e4a:	4402      	add	r2, r0
 8003e4c:	428a      	cmp	r2, r1
 8003e4e:	d100      	bne.n	8003e52 <memmove+0x2a>
 8003e50:	bd10      	pop	{r4, pc}
 8003e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e5a:	e7f7      	b.n	8003e4c <memmove+0x24>

08003e5c <_free_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4605      	mov	r5, r0
 8003e60:	2900      	cmp	r1, #0
 8003e62:	d040      	beq.n	8003ee6 <_free_r+0x8a>
 8003e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e68:	1f0c      	subs	r4, r1, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bfb8      	it	lt
 8003e6e:	18e4      	addlt	r4, r4, r3
 8003e70:	f000 f910 	bl	8004094 <__malloc_lock>
 8003e74:	4a1c      	ldr	r2, [pc, #112]	; (8003ee8 <_free_r+0x8c>)
 8003e76:	6813      	ldr	r3, [r2, #0]
 8003e78:	b933      	cbnz	r3, 8003e88 <_free_r+0x2c>
 8003e7a:	6063      	str	r3, [r4, #4]
 8003e7c:	6014      	str	r4, [r2, #0]
 8003e7e:	4628      	mov	r0, r5
 8003e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e84:	f000 b90c 	b.w	80040a0 <__malloc_unlock>
 8003e88:	42a3      	cmp	r3, r4
 8003e8a:	d908      	bls.n	8003e9e <_free_r+0x42>
 8003e8c:	6820      	ldr	r0, [r4, #0]
 8003e8e:	1821      	adds	r1, r4, r0
 8003e90:	428b      	cmp	r3, r1
 8003e92:	bf01      	itttt	eq
 8003e94:	6819      	ldreq	r1, [r3, #0]
 8003e96:	685b      	ldreq	r3, [r3, #4]
 8003e98:	1809      	addeq	r1, r1, r0
 8003e9a:	6021      	streq	r1, [r4, #0]
 8003e9c:	e7ed      	b.n	8003e7a <_free_r+0x1e>
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	b10b      	cbz	r3, 8003ea8 <_free_r+0x4c>
 8003ea4:	42a3      	cmp	r3, r4
 8003ea6:	d9fa      	bls.n	8003e9e <_free_r+0x42>
 8003ea8:	6811      	ldr	r1, [r2, #0]
 8003eaa:	1850      	adds	r0, r2, r1
 8003eac:	42a0      	cmp	r0, r4
 8003eae:	d10b      	bne.n	8003ec8 <_free_r+0x6c>
 8003eb0:	6820      	ldr	r0, [r4, #0]
 8003eb2:	4401      	add	r1, r0
 8003eb4:	1850      	adds	r0, r2, r1
 8003eb6:	4283      	cmp	r3, r0
 8003eb8:	6011      	str	r1, [r2, #0]
 8003eba:	d1e0      	bne.n	8003e7e <_free_r+0x22>
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4401      	add	r1, r0
 8003ec2:	6011      	str	r1, [r2, #0]
 8003ec4:	6053      	str	r3, [r2, #4]
 8003ec6:	e7da      	b.n	8003e7e <_free_r+0x22>
 8003ec8:	d902      	bls.n	8003ed0 <_free_r+0x74>
 8003eca:	230c      	movs	r3, #12
 8003ecc:	602b      	str	r3, [r5, #0]
 8003ece:	e7d6      	b.n	8003e7e <_free_r+0x22>
 8003ed0:	6820      	ldr	r0, [r4, #0]
 8003ed2:	1821      	adds	r1, r4, r0
 8003ed4:	428b      	cmp	r3, r1
 8003ed6:	bf01      	itttt	eq
 8003ed8:	6819      	ldreq	r1, [r3, #0]
 8003eda:	685b      	ldreq	r3, [r3, #4]
 8003edc:	1809      	addeq	r1, r1, r0
 8003ede:	6021      	streq	r1, [r4, #0]
 8003ee0:	6063      	str	r3, [r4, #4]
 8003ee2:	6054      	str	r4, [r2, #4]
 8003ee4:	e7cb      	b.n	8003e7e <_free_r+0x22>
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	200001c4 	.word	0x200001c4

08003eec <sbrk_aligned>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	4e0e      	ldr	r6, [pc, #56]	; (8003f28 <sbrk_aligned+0x3c>)
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	6831      	ldr	r1, [r6, #0]
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	b911      	cbnz	r1, 8003efe <sbrk_aligned+0x12>
 8003ef8:	f000 f8bc 	bl	8004074 <_sbrk_r>
 8003efc:	6030      	str	r0, [r6, #0]
 8003efe:	4621      	mov	r1, r4
 8003f00:	4628      	mov	r0, r5
 8003f02:	f000 f8b7 	bl	8004074 <_sbrk_r>
 8003f06:	1c43      	adds	r3, r0, #1
 8003f08:	d00a      	beq.n	8003f20 <sbrk_aligned+0x34>
 8003f0a:	1cc4      	adds	r4, r0, #3
 8003f0c:	f024 0403 	bic.w	r4, r4, #3
 8003f10:	42a0      	cmp	r0, r4
 8003f12:	d007      	beq.n	8003f24 <sbrk_aligned+0x38>
 8003f14:	1a21      	subs	r1, r4, r0
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 f8ac 	bl	8004074 <_sbrk_r>
 8003f1c:	3001      	adds	r0, #1
 8003f1e:	d101      	bne.n	8003f24 <sbrk_aligned+0x38>
 8003f20:	f04f 34ff 	mov.w	r4, #4294967295
 8003f24:	4620      	mov	r0, r4
 8003f26:	bd70      	pop	{r4, r5, r6, pc}
 8003f28:	200001c8 	.word	0x200001c8

08003f2c <_malloc_r>:
 8003f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f30:	1ccd      	adds	r5, r1, #3
 8003f32:	f025 0503 	bic.w	r5, r5, #3
 8003f36:	3508      	adds	r5, #8
 8003f38:	2d0c      	cmp	r5, #12
 8003f3a:	bf38      	it	cc
 8003f3c:	250c      	movcc	r5, #12
 8003f3e:	2d00      	cmp	r5, #0
 8003f40:	4607      	mov	r7, r0
 8003f42:	db01      	blt.n	8003f48 <_malloc_r+0x1c>
 8003f44:	42a9      	cmp	r1, r5
 8003f46:	d905      	bls.n	8003f54 <_malloc_r+0x28>
 8003f48:	230c      	movs	r3, #12
 8003f4a:	2600      	movs	r6, #0
 8003f4c:	603b      	str	r3, [r7, #0]
 8003f4e:	4630      	mov	r0, r6
 8003f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f54:	4e2e      	ldr	r6, [pc, #184]	; (8004010 <_malloc_r+0xe4>)
 8003f56:	f000 f89d 	bl	8004094 <__malloc_lock>
 8003f5a:	6833      	ldr	r3, [r6, #0]
 8003f5c:	461c      	mov	r4, r3
 8003f5e:	bb34      	cbnz	r4, 8003fae <_malloc_r+0x82>
 8003f60:	4629      	mov	r1, r5
 8003f62:	4638      	mov	r0, r7
 8003f64:	f7ff ffc2 	bl	8003eec <sbrk_aligned>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	d14d      	bne.n	800400a <_malloc_r+0xde>
 8003f6e:	6834      	ldr	r4, [r6, #0]
 8003f70:	4626      	mov	r6, r4
 8003f72:	2e00      	cmp	r6, #0
 8003f74:	d140      	bne.n	8003ff8 <_malloc_r+0xcc>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	4631      	mov	r1, r6
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	eb04 0803 	add.w	r8, r4, r3
 8003f80:	f000 f878 	bl	8004074 <_sbrk_r>
 8003f84:	4580      	cmp	r8, r0
 8003f86:	d13a      	bne.n	8003ffe <_malloc_r+0xd2>
 8003f88:	6821      	ldr	r1, [r4, #0]
 8003f8a:	3503      	adds	r5, #3
 8003f8c:	1a6d      	subs	r5, r5, r1
 8003f8e:	f025 0503 	bic.w	r5, r5, #3
 8003f92:	3508      	adds	r5, #8
 8003f94:	2d0c      	cmp	r5, #12
 8003f96:	bf38      	it	cc
 8003f98:	250c      	movcc	r5, #12
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	f7ff ffa5 	bl	8003eec <sbrk_aligned>
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d02b      	beq.n	8003ffe <_malloc_r+0xd2>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	442b      	add	r3, r5
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	e00e      	b.n	8003fcc <_malloc_r+0xa0>
 8003fae:	6822      	ldr	r2, [r4, #0]
 8003fb0:	1b52      	subs	r2, r2, r5
 8003fb2:	d41e      	bmi.n	8003ff2 <_malloc_r+0xc6>
 8003fb4:	2a0b      	cmp	r2, #11
 8003fb6:	d916      	bls.n	8003fe6 <_malloc_r+0xba>
 8003fb8:	1961      	adds	r1, r4, r5
 8003fba:	42a3      	cmp	r3, r4
 8003fbc:	6025      	str	r5, [r4, #0]
 8003fbe:	bf18      	it	ne
 8003fc0:	6059      	strne	r1, [r3, #4]
 8003fc2:	6863      	ldr	r3, [r4, #4]
 8003fc4:	bf08      	it	eq
 8003fc6:	6031      	streq	r1, [r6, #0]
 8003fc8:	5162      	str	r2, [r4, r5]
 8003fca:	604b      	str	r3, [r1, #4]
 8003fcc:	4638      	mov	r0, r7
 8003fce:	f104 060b 	add.w	r6, r4, #11
 8003fd2:	f000 f865 	bl	80040a0 <__malloc_unlock>
 8003fd6:	f026 0607 	bic.w	r6, r6, #7
 8003fda:	1d23      	adds	r3, r4, #4
 8003fdc:	1af2      	subs	r2, r6, r3
 8003fde:	d0b6      	beq.n	8003f4e <_malloc_r+0x22>
 8003fe0:	1b9b      	subs	r3, r3, r6
 8003fe2:	50a3      	str	r3, [r4, r2]
 8003fe4:	e7b3      	b.n	8003f4e <_malloc_r+0x22>
 8003fe6:	6862      	ldr	r2, [r4, #4]
 8003fe8:	42a3      	cmp	r3, r4
 8003fea:	bf0c      	ite	eq
 8003fec:	6032      	streq	r2, [r6, #0]
 8003fee:	605a      	strne	r2, [r3, #4]
 8003ff0:	e7ec      	b.n	8003fcc <_malloc_r+0xa0>
 8003ff2:	4623      	mov	r3, r4
 8003ff4:	6864      	ldr	r4, [r4, #4]
 8003ff6:	e7b2      	b.n	8003f5e <_malloc_r+0x32>
 8003ff8:	4634      	mov	r4, r6
 8003ffa:	6876      	ldr	r6, [r6, #4]
 8003ffc:	e7b9      	b.n	8003f72 <_malloc_r+0x46>
 8003ffe:	230c      	movs	r3, #12
 8004000:	4638      	mov	r0, r7
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	f000 f84c 	bl	80040a0 <__malloc_unlock>
 8004008:	e7a1      	b.n	8003f4e <_malloc_r+0x22>
 800400a:	6025      	str	r5, [r4, #0]
 800400c:	e7de      	b.n	8003fcc <_malloc_r+0xa0>
 800400e:	bf00      	nop
 8004010:	200001c4 	.word	0x200001c4

08004014 <_realloc_r>:
 8004014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004018:	4680      	mov	r8, r0
 800401a:	4614      	mov	r4, r2
 800401c:	460e      	mov	r6, r1
 800401e:	b921      	cbnz	r1, 800402a <_realloc_r+0x16>
 8004020:	4611      	mov	r1, r2
 8004022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004026:	f7ff bf81 	b.w	8003f2c <_malloc_r>
 800402a:	b92a      	cbnz	r2, 8004038 <_realloc_r+0x24>
 800402c:	f7ff ff16 	bl	8003e5c <_free_r>
 8004030:	4625      	mov	r5, r4
 8004032:	4628      	mov	r0, r5
 8004034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004038:	f000 f838 	bl	80040ac <_malloc_usable_size_r>
 800403c:	4284      	cmp	r4, r0
 800403e:	4607      	mov	r7, r0
 8004040:	d802      	bhi.n	8004048 <_realloc_r+0x34>
 8004042:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004046:	d812      	bhi.n	800406e <_realloc_r+0x5a>
 8004048:	4621      	mov	r1, r4
 800404a:	4640      	mov	r0, r8
 800404c:	f7ff ff6e 	bl	8003f2c <_malloc_r>
 8004050:	4605      	mov	r5, r0
 8004052:	2800      	cmp	r0, #0
 8004054:	d0ed      	beq.n	8004032 <_realloc_r+0x1e>
 8004056:	42bc      	cmp	r4, r7
 8004058:	4622      	mov	r2, r4
 800405a:	4631      	mov	r1, r6
 800405c:	bf28      	it	cs
 800405e:	463a      	movcs	r2, r7
 8004060:	f7ff fed4 	bl	8003e0c <memcpy>
 8004064:	4631      	mov	r1, r6
 8004066:	4640      	mov	r0, r8
 8004068:	f7ff fef8 	bl	8003e5c <_free_r>
 800406c:	e7e1      	b.n	8004032 <_realloc_r+0x1e>
 800406e:	4635      	mov	r5, r6
 8004070:	e7df      	b.n	8004032 <_realloc_r+0x1e>
	...

08004074 <_sbrk_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	2300      	movs	r3, #0
 8004078:	4d05      	ldr	r5, [pc, #20]	; (8004090 <_sbrk_r+0x1c>)
 800407a:	4604      	mov	r4, r0
 800407c:	4608      	mov	r0, r1
 800407e:	602b      	str	r3, [r5, #0]
 8004080:	f7fc fdb2 	bl	8000be8 <_sbrk>
 8004084:	1c43      	adds	r3, r0, #1
 8004086:	d102      	bne.n	800408e <_sbrk_r+0x1a>
 8004088:	682b      	ldr	r3, [r5, #0]
 800408a:	b103      	cbz	r3, 800408e <_sbrk_r+0x1a>
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	bd38      	pop	{r3, r4, r5, pc}
 8004090:	200001cc 	.word	0x200001cc

08004094 <__malloc_lock>:
 8004094:	4801      	ldr	r0, [pc, #4]	; (800409c <__malloc_lock+0x8>)
 8004096:	f000 b811 	b.w	80040bc <__retarget_lock_acquire_recursive>
 800409a:	bf00      	nop
 800409c:	200001d0 	.word	0x200001d0

080040a0 <__malloc_unlock>:
 80040a0:	4801      	ldr	r0, [pc, #4]	; (80040a8 <__malloc_unlock+0x8>)
 80040a2:	f000 b80c 	b.w	80040be <__retarget_lock_release_recursive>
 80040a6:	bf00      	nop
 80040a8:	200001d0 	.word	0x200001d0

080040ac <_malloc_usable_size_r>:
 80040ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b0:	1f18      	subs	r0, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bfbc      	itt	lt
 80040b6:	580b      	ldrlt	r3, [r1, r0]
 80040b8:	18c0      	addlt	r0, r0, r3
 80040ba:	4770      	bx	lr

080040bc <__retarget_lock_acquire_recursive>:
 80040bc:	4770      	bx	lr

080040be <__retarget_lock_release_recursive>:
 80040be:	4770      	bx	lr

080040c0 <_init>:
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	bf00      	nop
 80040c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c6:	bc08      	pop	{r3}
 80040c8:	469e      	mov	lr, r3
 80040ca:	4770      	bx	lr

080040cc <_fini>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	bf00      	nop
 80040d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d2:	bc08      	pop	{r3}
 80040d4:	469e      	mov	lr, r3
 80040d6:	4770      	bx	lr
